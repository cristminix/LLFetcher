/*! For license information please see background.js.LICENSE.txt */
(()=>{var t={6230:t=>{t.exports="object"==typeof self?self.FormData:window.FormData}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={exports:{}};return t[r](i,i.exports,n),i.exports}n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{"use strict";var t={};function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e(t)}function r(){r=function(){return t};var t={},n=Object.prototype,o=n.hasOwnProperty,i=Object.defineProperty||function(t,e,n){t[e]=n.value},a="function"==typeof Symbol?Symbol:{},s=a.iterator||"@@iterator",u=a.asyncIterator||"@@asyncIterator",c=a.toStringTag||"@@toStringTag";function l(t,e,n){return Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{l({},"")}catch(t){l=function(t,e,n){return t[e]=n}}function f(t,e,n,r){var o=e&&e.prototype instanceof p?e:p,a=Object.create(o.prototype),s=new x(r||[]);return i(a,"_invoke",{value:S(t,n,s)}),a}function d(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=f;var h={};function p(){}function y(){}function m(){}var g={};l(g,s,(function(){return this}));var b=Object.getPrototypeOf,v=b&&b(b(j([])));v&&v!==n&&o.call(v,s)&&(g=v);var w=m.prototype=p.prototype=Object.create(g);function E(t){["next","throw","return"].forEach((function(e){l(t,e,(function(t){return this._invoke(e,t)}))}))}function O(t,n){function r(i,a,s,u){var c=d(t[i],t,a);if("throw"!==c.type){var l=c.arg,f=l.value;return f&&"object"==e(f)&&o.call(f,"__await")?n.resolve(f.__await).then((function(t){r("next",t,s,u)}),(function(t){r("throw",t,s,u)})):n.resolve(f).then((function(t){l.value=t,s(l)}),(function(t){return r("throw",t,s,u)}))}u(c.arg)}var a;i(this,"_invoke",{value:function(t,e){function o(){return new n((function(n,o){r(t,e,n,o)}))}return a=a?a.then(o,o):o()}})}function S(t,e,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var s=A(a,n);if(s){if(s===h)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=d(t,e,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===h)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function A(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,A(t,e),"throw"===e.method))return h;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var r=d(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,h;var o=r.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,h):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,h)}function _(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function I(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(_,this),this.reset(!0)}function j(t){if(t){var e=t[s];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,r=function e(){for(;++n<t.length;)if(o.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return r.next=r}}return{next:D}}function D(){return{value:void 0,done:!0}}return y.prototype=m,i(w,"constructor",{value:m,configurable:!0}),i(m,"constructor",{value:y,configurable:!0}),y.displayName=l(m,c,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===y||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,m):(t.__proto__=m,l(t,c,"GeneratorFunction")),t.prototype=Object.create(w),t},t.awrap=function(t){return{__await:t}},E(O.prototype),l(O.prototype,u,(function(){return this})),t.AsyncIterator=O,t.async=function(e,n,r,o,i){void 0===i&&(i=Promise);var a=new O(f(e,n,r,o),i);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},E(w),l(w,c,"Generator"),l(w,s,(function(){return this})),l(w,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=Object(t),n=[];for(var r in e)n.push(r);return n.reverse(),function t(){for(;n.length;){var r=n.pop();if(r in e)return t.value=r,t.done=!1,t}return t.done=!0,t}},t.values=j,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(I),!t)for(var e in this)"t"===e.charAt(0)&&o.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var s=o.call(i,"catchLoc"),u=o.call(i,"finallyLoc");if(s&&u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,h):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),h},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),I(n),h}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var o=r.arg;I(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:j(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),h}},t}function o(t,e,n,r,o,i,a){try{var s=t[i](a),u=s.value}catch(t){return void n(t)}s.done?e(u):Promise.resolve(u).then(r,o)}function i(t){return function(){var e=this,n=arguments;return new Promise((function(r,i){var a=t.apply(e,n);function s(t){o(a,r,i,s,u,"next",t)}function u(t){o(a,r,i,s,u,"throw",t)}s(void 0)}))}}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function s(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}n.r(t),n.d(t,{VERSION:()=>ee,after:()=>kr,all:()=>Yr,allKeys:()=>pn,any:()=>Zr,assign:()=>kn,before:()=>Rr,bind:()=>wr,bindAll:()=>Sr,chain:()=>mr,chunk:()=>No,clone:()=>Nn,collect:()=>Hr,compact:()=>_o,compose:()=>Cr,constant:()=>Ge,contains:()=>to,countBy:()=>yo,create:()=>Pn,debounce:()=>jr,default:()=>Fo,defaults:()=>Rn,defer:()=>Ir,delay:()=>_r,detect:()=>Vr,difference:()=>xo,drop:()=>So,each:()=>Jr,escape:()=>or,every:()=>Yr,extend:()=>Cn,extendOwn:()=>kn,filter:()=>Xr,find:()=>Vr,findIndex:()=>Br,findKey:()=>Pr,findLastIndex:()=>qr,findWhere:()=>Wr,first:()=>Oo,flatten:()=>Io,foldl:()=>Kr,foldr:()=>Gr,forEach:()=>Jr,functions:()=>Dn,get:()=>Mn,groupBy:()=>ho,has:()=>zn,head:()=>Oo,identity:()=>Vn,include:()=>to,includes:()=>to,indexBy:()=>po,indexOf:()=>Mr,initial:()=>Eo,inject:()=>Kr,intersection:()=>Co,invert:()=>jn,invoke:()=>eo,isArguments:()=>He,isArray:()=>Ve,isArrayBuffer:()=>Le,isBoolean:()=>_e,isDataView:()=>ze,isDate:()=>Te,isElement:()=>Ie,isEmpty:()=>an,isEqual:()=>hn,isError:()=>ke,isFinite:()=>$e,isFunction:()=>Be,isMap:()=>On,isMatch:()=>sn,isNaN:()=>Ke,isNull:()=>Se,isNumber:()=>De,isObject:()=>Oe,isRegExp:()=>Ce,isSet:()=>An,isString:()=>je,isSymbol:()=>Re,isTypedArray:()=>en,isUndefined:()=>Ae,isWeakMap:()=>Sn,isWeakSet:()=>_n,iteratee:()=>Kn,keys:()=>on,last:()=>Ao,lastIndexOf:()=>zr,map:()=>Hr,mapObject:()=>Xn,matcher:()=>Wn,matches:()=>Wn,max:()=>oo,memoize:()=>Ar,methods:()=>Dn,min:()=>io,mixin:()=>qo,negate:()=>Tr,noop:()=>Qn,now:()=>er,object:()=>Lo,omit:()=>wo,once:()=>Lr,pairs:()=>xn,partial:()=>vr,partition:()=>mo,pick:()=>vo,pluck:()=>no,property:()=>Jn,propertyOf:()=>Yn,random:()=>tr,range:()=>Po,reduce:()=>Kr,reduceRight:()=>Gr,reject:()=>Qr,rest:()=>So,restArguments:()=>Ee,result:()=>hr,sample:()=>uo,select:()=>Xr,shuffle:()=>co,size:()=>go,some:()=>Zr,sortBy:()=>lo,sortedIndex:()=>Fr,tail:()=>So,take:()=>Oo,tap:()=>Bn,template:()=>dr,templateSettings:()=>ar,throttle:()=>xr,times:()=>Zn,toArray:()=>so,toPath:()=>qn,transpose:()=>ko,unescape:()=>ir,union:()=>To,uniq:()=>Do,unique:()=>Do,uniqueId:()=>yr,unzip:()=>ko,values:()=>In,where:()=>ro,without:()=>jo,wrap:()=>Dr,zip:()=>Ro});var u=function(){function t(e,n){var o=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),s(this,"db_prefix","db_"),s(this,"db_id",void 0),s(this,"db_new",void 0),s(this,"db",void 0),s(this,"storage",void 0),this.db_id=this.db_prefix+e,this.db_new=!1;try{this.storage=chrome.storage["local"===n?"local":"sync"]}catch(t){this.storage=n}i(r().mark((function t(){var n;return r().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,o.storage.get([o.db_id]);case 2:void 0!==(n=t.sent)[o.db_id]&&(o.db=n[o.db_id]),o.db&&o.db.tables&&o.db.data||(o.validateName(e)?(o.db={tables:{},data:{}},o.commit(),o.db_new=!0):error("The name '"+e+"' contains invalid characters"));case 5:case"end":return t.stop()}}),t)})))()}var n,o;return n=t,o=[{key:"drop",value:function(){var t=this;i(r().mark((function e(){return r().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,t.storage.remove([t.db_id]);case 2:case"end":return e.stop()}}),e)})))(),this.db=null}},{key:"getItem",value:function(t){try{return this.storage.get([t])}catch(t){return null}}},{key:"replace",value:function(t){setItem(db_id,t)}},{key:"setItem",value:function(t,e){try{return this.storage.set({key:e}).then((function(){})),!0}catch(t){return!1}}},{key:"tableCount",value:function(){var t=0;for(var e in this.db.tables)this.db.tables.hasOwnProperty(e)&&t++;return t}},{key:"tableFields",value:function(t){return this.db.tables[t].fields}},{key:"tableExists",value:function(t){return"object"===e(this.db.tables[t])&&!!this.db.tables[t]}},{key:"tableExistsWarn",value:function(t){this.tableExists(t)||this.error("The table '"+t+"' does not exist")}},{key:"columnExists",value:function(t,e){var n=!1,r=this.db.tables[t].fields;for(var o in r)if(r[o]===e){n=!0;break}return n}},{key:"_createTable",value:function(t,e){this.db.tables[t]={fields:e,auto_increment:1},this.db.data[t]={}}},{key:"_dropTable",value:function(t){delete this.db.tables[t],delete this.db.data[t]}},{key:"_truncate",value:function(t){this.db.tables[t].auto_increment=1,this.db.data[t]={}}},{key:"_alterTable",value:function(t,n,r){if(this.db.tables[t].fields=this.db.tables[t].fields.concat(n),void 0!==r)for(var o in this.db.data[t])if(db.data[t].hasOwnProperty(o))for(var i in n)"object"===e(r)?this.db.data[t][o][n[i]]=r[n[i]]:this.db.data[t][o][n[i]]=r}},{key:"_rowCount",value:function(t){var e=0;for(var n in this.db.data[t])this.db.data[t].hasOwnProperty(n)&&e++;return e}},{key:"_insert",value:function(t,e){return e.ID=this.db.tables[t].auto_increment,this.db.data[t][this.db.tables[t].auto_increment]=e,this.db.tables[t].auto_increment++,e.ID}},{key:"select",value:function(t,e,n,r,o,i){var a,s=null,u=[],c=null;for(a=0;a<e.length;a++)s=e[a],c=this.db.data[t][s],u.push(this.clone(c));if(o&&o instanceof Array)for(a=0;a<o.length;a++)u.sort(this.sort_results(o[a][0],o[a].length>1?o[a][1]:null));if(i&&i instanceof Array){for(var l=0;l<i.length;l++){var f={},d=i[l];for(a=0;a<u.length;a++)void 0!==u[a]&&(u[a].hasOwnProperty(d)&&f.hasOwnProperty(u[a][d])?delete u[a]:f[u[a][d]]=1)}var h=[];for(a=0;a<u.length;a++)void 0!==u[a]&&h.push(u[a]);u=h}return r=r&&"number"==typeof r?r:null,(n=n&&"number"==typeof n?n:null)&&r?u=u.slice(n,n+r):n?u=u.slice(n):r&&(u=u.slice(n,r)),u}},{key:"sort_results",value:function(t,e){return function(n,r){var o="string"==typeof n[t]?n[t].toLowerCase():n[t],i="string"==typeof r[t]?r[t].toLowerCase():r[t];return"DESC"===e?o===i?0:o<i?1:-1:o===i?0:o>i?1:-1}}},{key:"queryByValues",value:function(t,e){var n=[],r=!1,o=null;for(var i in this.db.data[t])if(this.db.data[t].hasOwnProperty(i)){for(var a in o=this.db.data[t][i],r=!0,e)if(e.hasOwnProperty(a))if("string"==typeof e[a]){if(null===o[a]||o[a].toString().toLowerCase()!==e[a].toString().toLowerCase()){r=!1;break}}else if(o[a]!==e[a]){r=!1;break}r&&n.push(i)}return n}},{key:"queryByFunction",value:function(t,e){var n=[],r=null;for(var o in this.db.data[t])this.db.data[t].hasOwnProperty(o)&&(r=this.db.data[t][o],!0===e(this.clone(r))&&n.push(o));return n}},{key:"getIDs",value:function(t){var e=[];for(var n in this.db.data[t])this.db.data[t].hasOwnProperty(n)&&e.push(n);return e}},{key:"_deleteRows",value:function(t,e){for(var n=0;n<e.length;n++)this.db.data[t].hasOwnProperty(e[n])&&delete this.db.data[t][e[n]];return e.length}},{key:"_update",value:function(t,e,n){for(var r="",o=0,i=0;i<e.length;i++){r=e[i];var a=n(this.clone(this.db.data[t][r]));if(a){delete a.ID;var s=this.db.data[t][r];for(var u in a)a.hasOwnProperty(u)&&(s[u]=a[u]);this.db.data[t][r]=this.validFields(t,s),o++}}return o}},{key:"commit",value:function(t){try{var e={};return e[this.db_id]=this.db,this.storage.set(e,(function(e){"function"==typeof t&&t(e)})),!0}catch(t){return!1}}},{key:"serialize",value:function(){return JSON.stringify(this.db)}},{key:"error",value:function(t){throw new Error(t)}},{key:"clone",value:function(t){var e={};for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}},{key:"validateName",value:function(t){return!t.toString().match(/[^a-z_0-9]/gi)}},{key:"validFields",value:function(t,e){var n="",r={};for(n in e)-1===this.db.tables[t].fields.indexOf(n)&&error("Invalid query parameter: "+n),r[n]=e[n];return r}},{key:"validateData",value:function(t,e){for(var n="",r={},o=0;o<this.db.tables[t].fields.length;o++)r[n=this.db.tables[t].fields[o]]=null===e[n]||void 0===e[n]?null:e[n];return r}},{key:"isNew",value:function(t){var e=this;return setTimeout((function(){t(e.db_new)}),100)}},{key:"createTable",value:function(t,e){var n=!1;if(this.validateName(t))if(this.tableExists(t))error("The table name '"+t+"' already exists.");else{var r,o=!0;for(r=0;r<e.length;r++)if(!this.validateName(e[r])){o=!1;break}if(o){var i={};for(r=0;r<e.length;r++)i[e[r]]=!0;for(var a in delete i.ID,e=["ID"],i)i.hasOwnProperty(a)&&e.push(a);this._createTable(t,e),n=!0}else error("One or more field names in the table definition contains invalid characters")}else error("The database name '"+t+"' contains invalid characters.");return n}},{key:"createTableWithData",value:function(t,n){("object"!==e(n)||!n.length||n.length<1)&&error("Data supplied isn't in object form. Example: [{k:v,k:v},{k:v,k:v} ..]");var r=Object.keys(n[0]);if(this.createTable(t,r)){this.commit();for(var o=0;o<n.length;o++)insert(t,n[o])||error("Failed to insert record: ["+JSON.stringify(n[o])+"]");this.commit()}return!0}},{key:"dropTable",value:function(t){this.tableExistsWarn(t),this._dropTable(t)}},{key:"truncate",value:function(t){this.tableExistsWarn(t),this._truncate(t)}},{key:"alterTable",value:function(t,n,r){var o=!1;if(this.validateName(t)){if("object"===e(n)){var i,a=!0;for(i=0;i<n.length;i++)if(!this.validateName(n[i])){a=!1;break}if(a){var s={};for(i=0;i<n.length;i++)s[n[i]]=!0;for(var u in delete s.ID,n=[],s)s.hasOwnProperty(u)&&n.push(u);this._alterTable(t,n,r),o=!0}else this.error("One or more field names in the table definition contains invalid characters")}else if("string"==typeof n)if(this.validateName(n)){var c=[];c.push(n),this._alterTable(t,c,r),o=!0}else this.error("One or more field names in the table definition contains invalid characters")}else error("The database name '"+t+"' contains invalid characters");return o}},{key:"rowCount",value:function(t){return this.tableExistsWarn(t),this._rowCount(t)}},{key:"insert",value:function(t,e){return this.tableExistsWarn(t),this._insert(t,this.validateData(t,e))}},{key:"insertOrUpdate",value:function(t,n,r){this.tableExistsWarn(t);var o=[];if(n?"object"===e(n)?o=this.queryByValues(t,this.validFields(t,n)):"function"==typeof n&&(o=this.queryByFunction(t,n)):o=this.getIDs(t),0===o.length)return this._insert(t,this.validateData(t,r));var i=[];return this._update(t,o,(function(t){return i.push(t.ID),r})),i}},{key:"update",value:function(t,n,r){this.tableExistsWarn(t);var o=[];return n?"object"===e(n)?o=this.queryByValues(t,this.validFields(t,n)):"function"==typeof n&&(o=this.queryByFunction(t,n)):o=this.getIDs(t),this._update(t,o,r)}},{key:"query",value:function(t,n,r,o,i,a){this.tableExistsWarn(t);var s=[];return n?"object"===e(n)?s=this.queryByValues(t,this.validFields(t,n),r,o):"function"==typeof n&&(s=this.queryByFunction(t,n,r,o)):s=this.getIDs(t,r,o),this.select(t,s,o,r,i,a)}},{key:"queryAll",value:function(t,e){return e?this.query(t,e.hasOwnProperty("query")?e.query:null,e.hasOwnProperty("limit")?e.limit:null,e.hasOwnProperty("start")?e.start:null,e.hasOwnProperty("sort")?e.sort:null,e.hasOwnProperty("distinct")?e.distinct:null):this.query(t)}},{key:"deleteRows",value:function(t,n){tableExistsWarn(t);var r=[];return n?"object"===e(n)?r=this.queryByValues(t,this.validFields(t,n)):"function"==typeof n&&(r=this.queryByFunction(t,n)):r=this.getIDs(t),this._deleteRows(t,r)}}],o&&a(n.prototype,o),Object.defineProperty(n,"prototype",{writable:!1}),t}();function c(t,e){return function(){return t.apply(e,arguments)}}const{toString:l}=Object.prototype,{getPrototypeOf:f}=Object,d=(h=Object.create(null),t=>{const e=l.call(t);return h[e]||(h[e]=e.slice(8,-1).toLowerCase())});var h;const p=t=>(t=t.toLowerCase(),e=>d(e)===t),y=t=>e=>typeof e===t,{isArray:m}=Array,g=y("undefined"),b=p("ArrayBuffer"),v=y("string"),w=y("function"),E=y("number"),O=t=>null!==t&&"object"==typeof t,S=t=>{if("object"!==d(t))return!1;const e=f(t);return!(null!==e&&e!==Object.prototype&&null!==Object.getPrototypeOf(e)||Symbol.toStringTag in t||Symbol.iterator in t)},A=p("Date"),_=p("File"),I=p("Blob"),x=p("FileList"),j=p("URLSearchParams");function D(t,e,{allOwnKeys:n=!1}={}){if(null==t)return;let r,o;if("object"!=typeof t&&(t=[t]),m(t))for(r=0,o=t.length;r<o;r++)e.call(null,t[r],r,t);else{const o=n?Object.getOwnPropertyNames(t):Object.keys(t),i=o.length;let a;for(r=0;r<i;r++)a=o[r],e.call(null,t[a],a,t)}}const T=(C="undefined"!=typeof Uint8Array&&f(Uint8Array),t=>C&&t instanceof C);var C;const k=p("HTMLFormElement"),R=(({hasOwnProperty:t})=>(e,n)=>t.call(e,n))(Object.prototype),L=p("RegExp"),P=(t,e)=>{const n=Object.getOwnPropertyDescriptors(t),r={};D(n,((n,o)=>{!1!==e(n,o,t)&&(r[o]=n)})),Object.defineProperties(t,r)},N={isArray:m,isArrayBuffer:b,isBuffer:function(t){return null!==t&&!g(t)&&null!==t.constructor&&!g(t.constructor)&&w(t.constructor.isBuffer)&&t.constructor.isBuffer(t)},isFormData:t=>{const e="[object FormData]";return t&&("function"==typeof FormData&&t instanceof FormData||l.call(t)===e||w(t.toString)&&t.toString()===e)},isArrayBufferView:function(t){let e;return e="undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(t):t&&t.buffer&&b(t.buffer),e},isString:v,isNumber:E,isBoolean:t=>!0===t||!1===t,isObject:O,isPlainObject:S,isUndefined:g,isDate:A,isFile:_,isBlob:I,isRegExp:L,isFunction:w,isStream:t=>O(t)&&w(t.pipe),isURLSearchParams:j,isTypedArray:T,isFileList:x,forEach:D,merge:function t(){const e={},n=(n,r)=>{S(e[r])&&S(n)?e[r]=t(e[r],n):S(n)?e[r]=t({},n):m(n)?e[r]=n.slice():e[r]=n};for(let t=0,e=arguments.length;t<e;t++)arguments[t]&&D(arguments[t],n);return e},extend:(t,e,n,{allOwnKeys:r}={})=>(D(e,((e,r)=>{n&&w(e)?t[r]=c(e,n):t[r]=e}),{allOwnKeys:r}),t),trim:t=>t.trim?t.trim():t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,""),stripBOM:t=>(65279===t.charCodeAt(0)&&(t=t.slice(1)),t),inherits:(t,e,n,r)=>{t.prototype=Object.create(e.prototype,r),t.prototype.constructor=t,Object.defineProperty(t,"super",{value:e.prototype}),n&&Object.assign(t.prototype,n)},toFlatObject:(t,e,n,r)=>{let o,i,a;const s={};if(e=e||{},null==t)return e;do{for(o=Object.getOwnPropertyNames(t),i=o.length;i-- >0;)a=o[i],r&&!r(a,t,e)||s[a]||(e[a]=t[a],s[a]=!0);t=!1!==n&&f(t)}while(t&&(!n||n(t,e))&&t!==Object.prototype);return e},kindOf:d,kindOfTest:p,endsWith:(t,e,n)=>{t=String(t),(void 0===n||n>t.length)&&(n=t.length),n-=e.length;const r=t.indexOf(e,n);return-1!==r&&r===n},toArray:t=>{if(!t)return null;if(m(t))return t;let e=t.length;if(!E(e))return null;const n=new Array(e);for(;e-- >0;)n[e]=t[e];return n},forEachEntry:(t,e)=>{const n=(t&&t[Symbol.iterator]).call(t);let r;for(;(r=n.next())&&!r.done;){const n=r.value;e.call(t,n[0],n[1])}},matchAll:(t,e)=>{let n;const r=[];for(;null!==(n=t.exec(e));)r.push(n);return r},isHTMLForm:k,hasOwnProperty:R,hasOwnProp:R,reduceDescriptors:P,freezeMethods:t=>{P(t,((e,n)=>{const r=t[n];w(r)&&(e.enumerable=!1,"writable"in e?e.writable=!1:e.set||(e.set=()=>{throw Error("Can not read-only method '"+n+"'")}))}))},toObjectSet:(t,e)=>{const n={},r=t=>{t.forEach((t=>{n[t]=!0}))};return m(t)?r(t):r(String(t).split(e)),n},toCamelCase:t=>t.toLowerCase().replace(/[_-\s]([a-z\d])(\w*)/g,(function(t,e,n){return e.toUpperCase()+n})),noop:()=>{},toFiniteNumber:(t,e)=>(t=+t,Number.isFinite(t)?t:e)};function B(t,e,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=t,this.name="AxiosError",e&&(this.code=e),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}N.inherits(B,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const q=B.prototype,F={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((t=>{F[t]={value:t}})),Object.defineProperties(B,F),Object.defineProperty(q,"isAxiosError",{value:!0}),B.from=(t,e,n,r,o,i)=>{const a=Object.create(q);return N.toFlatObject(t,a,(function(t){return t!==Error.prototype}),(t=>"isAxiosError"!==t)),B.call(a,t.message,e,n,r,o),a.cause=t,a.name=t.name,i&&Object.assign(a,i),a};const U=B,M=n(6230);function z(t){return N.isPlainObject(t)||N.isArray(t)}function V(t){return N.endsWith(t,"[]")?t.slice(0,-2):t}function W(t,e,n){return t?t.concat(e).map((function(t,e){return t=V(t),!n&&e?"["+t+"]":t})).join(n?".":""):e}const J=N.toFlatObject(N,{},null,(function(t){return/^is[A-Z]/.test(t)})),H=function(t,e,n){if(!N.isObject(t))throw new TypeError("target must be an object");e=e||new(M||FormData);const r=(n=N.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(t,e){return!N.isUndefined(e[t])}))).metaTokens,o=n.visitor||l,i=n.dots,a=n.indexes,s=(n.Blob||"undefined"!=typeof Blob&&Blob)&&(u=e)&&N.isFunction(u.append)&&"FormData"===u[Symbol.toStringTag]&&u[Symbol.iterator];var u;if(!N.isFunction(o))throw new TypeError("visitor must be a function");function c(t){if(null===t)return"";if(N.isDate(t))return t.toISOString();if(!s&&N.isBlob(t))throw new U("Blob is not supported. Use a Buffer instead.");return N.isArrayBuffer(t)||N.isTypedArray(t)?s&&"function"==typeof Blob?new Blob([t]):Buffer.from(t):t}function l(t,n,o){let s=t;if(t&&!o&&"object"==typeof t)if(N.endsWith(n,"{}"))n=r?n:n.slice(0,-2),t=JSON.stringify(t);else if(N.isArray(t)&&function(t){return N.isArray(t)&&!t.some(z)}(t)||N.isFileList(t)||N.endsWith(n,"[]")&&(s=N.toArray(t)))return n=V(n),s.forEach((function(t,r){!N.isUndefined(t)&&null!==t&&e.append(!0===a?W([n],r,i):null===a?n:n+"[]",c(t))})),!1;return!!z(t)||(e.append(W(o,n,i),c(t)),!1)}const f=[],d=Object.assign(J,{defaultVisitor:l,convertValue:c,isVisitable:z});if(!N.isObject(t))throw new TypeError("data must be an object");return function t(n,r){if(!N.isUndefined(n)){if(-1!==f.indexOf(n))throw Error("Circular reference detected in "+r.join("."));f.push(n),N.forEach(n,(function(n,i){!0===(!(N.isUndefined(n)||null===n)&&o.call(e,n,N.isString(i)?i.trim():i,r,d))&&t(n,r?r.concat(i):[i])})),f.pop()}}(t),e};function $(t){const e={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(t).replace(/[!'()~]|%20|%00/g,(function(t){return e[t]}))}function K(t,e){this._pairs=[],t&&H(t,this,e)}const G=K.prototype;G.append=function(t,e){this._pairs.push([t,e])},G.toString=function(t){const e=t?function(e){return t.call(this,e,$)}:$;return this._pairs.map((function(t){return e(t[0])+"="+e(t[1])}),"").join("&")};const X=K;function Q(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function Y(t,e,n){if(!e)return t;const r=n&&n.encode||Q,o=n&&n.serialize;let i;if(i=o?o(e,n):N.isURLSearchParams(e)?e.toString():new X(e,n).toString(r),i){const e=t.indexOf("#");-1!==e&&(t=t.slice(0,e)),t+=(-1===t.indexOf("?")?"?":"&")+i}return t}const Z=class{constructor(){this.handlers=[]}use(t,e,n){return this.handlers.push({fulfilled:t,rejected:e,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){N.forEach(this.handlers,(function(e){null!==e&&t(e)}))}},tt={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},et="undefined"!=typeof URLSearchParams?URLSearchParams:X,nt=FormData,rt=(()=>{let t;return("undefined"==typeof navigator||"ReactNative"!==(t=navigator.product)&&"NativeScript"!==t&&"NS"!==t)&&"undefined"!=typeof window&&"undefined"!=typeof document})(),ot={isBrowser:!0,classes:{URLSearchParams:et,FormData:nt,Blob},isStandardBrowserEnv:rt,protocols:["http","https","file","blob","url","data"]},it=function(t){function e(t,n,r,o){let i=t[o++];const a=Number.isFinite(+i),s=o>=t.length;return i=!i&&N.isArray(r)?r.length:i,s?(N.hasOwnProp(r,i)?r[i]=[r[i],n]:r[i]=n,!a):(r[i]&&N.isObject(r[i])||(r[i]=[]),e(t,n,r[i],o)&&N.isArray(r[i])&&(r[i]=function(t){const e={},n=Object.keys(t);let r;const o=n.length;let i;for(r=0;r<o;r++)i=n[r],e[i]=t[i];return e}(r[i])),!a)}if(N.isFormData(t)&&N.isFunction(t.entries)){const n={};return N.forEachEntry(t,((t,r)=>{e(function(t){return N.matchAll(/\w+|\[(\w*)]/g,t).map((t=>"[]"===t[0]?"":t[1]||t[0]))}(t),r,n,0)})),n}return null},at=ot.isStandardBrowserEnv?{write:function(t,e,n,r,o,i){const a=[];a.push(t+"="+encodeURIComponent(e)),N.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),N.isString(r)&&a.push("path="+r),N.isString(o)&&a.push("domain="+o),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(t){const e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove:function(t){this.write(t,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function st(t,e){return t&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)?function(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}(t,e):e}const ut=ot.isStandardBrowserEnv?function(){const t=/(msie|trident)/i.test(navigator.userAgent),e=document.createElement("a");let n;function r(n){let r=n;return t&&(e.setAttribute("href",r),r=e.href),e.setAttribute("href",r),{href:e.href,protocol:e.protocol?e.protocol.replace(/:$/,""):"",host:e.host,search:e.search?e.search.replace(/^\?/,""):"",hash:e.hash?e.hash.replace(/^#/,""):"",hostname:e.hostname,port:e.port,pathname:"/"===e.pathname.charAt(0)?e.pathname:"/"+e.pathname}}return n=r(window.location.href),function(t){const e=N.isString(t)?r(t):t;return e.protocol===n.protocol&&e.host===n.host}}():function(){return!0};function ct(t,e,n){U.call(this,null==t?"canceled":t,U.ERR_CANCELED,e,n),this.name="CanceledError"}N.inherits(ct,U,{__CANCEL__:!0});const lt=ct,ft=N.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),dt=Symbol("internals"),ht=Symbol("defaults");function pt(t){return t&&String(t).trim().toLowerCase()}function yt(t){return!1===t||null==t?t:N.isArray(t)?t.map(yt):String(t)}function mt(t,e,n,r){return N.isFunction(r)?r.call(this,e,n):N.isString(e)?N.isString(r)?-1!==e.indexOf(r):N.isRegExp(r)?r.test(e):void 0:void 0}function gt(t,e){e=e.toLowerCase();const n=Object.keys(t);let r,o=n.length;for(;o-- >0;)if(r=n[o],e===r.toLowerCase())return r;return null}function bt(t,e){t&&this.set(t),this[ht]=e||null}Object.assign(bt.prototype,{set:function(t,e,n){const r=this;function o(t,e,n){const o=pt(e);if(!o)throw new Error("header name must be a non-empty string");const i=gt(r,o);(!i||!0===n||!1!==r[i]&&!1!==n)&&(r[i||e]=yt(t))}return N.isPlainObject(t)?N.forEach(t,((t,n)=>{o(t,n,e)})):o(e,t,n),this},get:function(t,e){if(!(t=pt(t)))return;const n=gt(this,t);if(n){const t=this[n];if(!e)return t;if(!0===e)return function(t){const e=Object.create(null),n=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let r;for(;r=n.exec(t);)e[r[1]]=r[2];return e}(t);if(N.isFunction(e))return e.call(this,t,n);if(N.isRegExp(e))return e.exec(t);throw new TypeError("parser must be boolean|regexp|function")}},has:function(t,e){if(t=pt(t)){const n=gt(this,t);return!(!n||e&&!mt(0,this[n],n,e))}return!1},delete:function(t,e){const n=this;let r=!1;function o(t){if(t=pt(t)){const o=gt(n,t);!o||e&&!mt(0,n[o],o,e)||(delete n[o],r=!0)}}return N.isArray(t)?t.forEach(o):o(t),r},clear:function(){return Object.keys(this).forEach(this.delete.bind(this))},normalize:function(t){const e=this,n={};return N.forEach(this,((r,o)=>{const i=gt(n,o);if(i)return e[i]=yt(r),void delete e[o];const a=t?function(t){return t.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,((t,e,n)=>e.toUpperCase()+n))}(o):String(o).trim();a!==o&&delete e[o],e[a]=yt(r),n[a]=!0})),this},toJSON:function(t){const e=Object.create(null);return N.forEach(Object.assign({},this[ht]||null,this),((n,r)=>{null!=n&&!1!==n&&(e[r]=t&&N.isArray(n)?n.join(", "):n)})),e}}),Object.assign(bt,{from:function(t){return N.isString(t)?new this((t=>{const e={};let n,r,o;return t&&t.split("\n").forEach((function(t){o=t.indexOf(":"),n=t.substring(0,o).trim().toLowerCase(),r=t.substring(o+1).trim(),!n||e[n]&&ft[n]||("set-cookie"===n?e[n]?e[n].push(r):e[n]=[r]:e[n]=e[n]?e[n]+", "+r:r)})),e})(t)):t instanceof this?t:new this(t)},accessor:function(t){const e=(this[dt]=this[dt]={accessors:{}}).accessors,n=this.prototype;function r(t){const r=pt(t);e[r]||(function(t,e){const n=N.toCamelCase(" "+e);["get","set","has"].forEach((r=>{Object.defineProperty(t,r+n,{value:function(t,n,o){return this[r].call(this,e,t,n,o)},configurable:!0})}))}(n,t),e[r]=!0)}return N.isArray(t)?t.forEach(r):r(t),this}}),bt.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent"]),N.freezeMethods(bt.prototype),N.freezeMethods(bt);const vt=bt;function wt(t,e){let n=0;const r=function(t,e){t=t||10;const n=new Array(t),r=new Array(t);let o,i=0,a=0;return e=void 0!==e?e:1e3,function(s){const u=Date.now(),c=r[a];o||(o=u),n[i]=s,r[i]=u;let l=a,f=0;for(;l!==i;)f+=n[l++],l%=t;if(i=(i+1)%t,i===a&&(a=(a+1)%t),u-o<e)return;const d=c&&u-c;return d?Math.round(1e3*f/d):void 0}}(50,250);return o=>{const i=o.loaded,a=o.lengthComputable?o.total:void 0,s=i-n,u=r(s);n=i;const c={loaded:i,total:a,progress:a?i/a:void 0,bytes:s,rate:u||void 0,estimated:u&&a&&i<=a?(a-i)/u:void 0};c[e?"download":"upload"]=!0,t(c)}}function Et(t){return new Promise((function(e,n){let r=t.data;const o=vt.from(t.headers).normalize(),i=t.responseType;let a;function s(){t.cancelToken&&t.cancelToken.unsubscribe(a),t.signal&&t.signal.removeEventListener("abort",a)}N.isFormData(r)&&ot.isStandardBrowserEnv&&o.setContentType(!1);let u=new XMLHttpRequest;if(t.auth){const e=t.auth.username||"",n=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";o.set("Authorization","Basic "+btoa(e+":"+n))}const c=st(t.baseURL,t.url);function l(){if(!u)return;const r=vt.from("getAllResponseHeaders"in u&&u.getAllResponseHeaders());!function(t,e,n){const r=n.config.validateStatus;n.status&&r&&!r(n.status)?e(new U("Request failed with status code "+n.status,[U.ERR_BAD_REQUEST,U.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):t(n)}((function(t){e(t),s()}),(function(t){n(t),s()}),{data:i&&"text"!==i&&"json"!==i?u.response:u.responseText,status:u.status,statusText:u.statusText,headers:r,config:t,request:u}),u=null}if(u.open(t.method.toUpperCase(),Y(c,t.params,t.paramsSerializer),!0),u.timeout=t.timeout,"onloadend"in u?u.onloadend=l:u.onreadystatechange=function(){u&&4===u.readyState&&(0!==u.status||u.responseURL&&0===u.responseURL.indexOf("file:"))&&setTimeout(l)},u.onabort=function(){u&&(n(new U("Request aborted",U.ECONNABORTED,t,u)),u=null)},u.onerror=function(){n(new U("Network Error",U.ERR_NETWORK,t,u)),u=null},u.ontimeout=function(){let e=t.timeout?"timeout of "+t.timeout+"ms exceeded":"timeout exceeded";const r=t.transitional||tt;t.timeoutErrorMessage&&(e=t.timeoutErrorMessage),n(new U(e,r.clarifyTimeoutError?U.ETIMEDOUT:U.ECONNABORTED,t,u)),u=null},ot.isStandardBrowserEnv){const e=(t.withCredentials||ut(c))&&t.xsrfCookieName&&at.read(t.xsrfCookieName);e&&o.set(t.xsrfHeaderName,e)}void 0===r&&o.setContentType(null),"setRequestHeader"in u&&N.forEach(o.toJSON(),(function(t,e){u.setRequestHeader(e,t)})),N.isUndefined(t.withCredentials)||(u.withCredentials=!!t.withCredentials),i&&"json"!==i&&(u.responseType=t.responseType),"function"==typeof t.onDownloadProgress&&u.addEventListener("progress",wt(t.onDownloadProgress,!0)),"function"==typeof t.onUploadProgress&&u.upload&&u.upload.addEventListener("progress",wt(t.onUploadProgress)),(t.cancelToken||t.signal)&&(a=e=>{u&&(n(!e||e.type?new lt(null,t,u):e),u.abort(),u=null)},t.cancelToken&&t.cancelToken.subscribe(a),t.signal&&(t.signal.aborted?a():t.signal.addEventListener("abort",a)));const f=function(t){const e=/^([-+\w]{1,25})(:?\/\/|:)/.exec(t);return e&&e[1]||""}(c);f&&-1===ot.protocols.indexOf(f)?n(new U("Unsupported protocol "+f+":",U.ERR_BAD_REQUEST,t)):u.send(r||null)}))}const Ot={http:Et,xhr:Et},St=t=>{if(N.isString(t)){const e=Ot[t];if(!t)throw Error(N.hasOwnProp(t)?`Adapter '${t}' is not available in the build`:`Can not resolve adapter '${t}'`);return e}if(!N.isFunction(t))throw new TypeError("adapter is not a function");return t},At={"Content-Type":"application/x-www-form-urlencoded"},_t={transitional:tt,adapter:function(){let t;return"undefined"!=typeof XMLHttpRequest?t=St("xhr"):"undefined"!=typeof process&&"process"===N.kindOf(process)&&(t=St("http")),t}(),transformRequest:[function(t,e){const n=e.getContentType()||"",r=n.indexOf("application/json")>-1,o=N.isObject(t);if(o&&N.isHTMLForm(t)&&(t=new FormData(t)),N.isFormData(t))return r&&r?JSON.stringify(it(t)):t;if(N.isArrayBuffer(t)||N.isBuffer(t)||N.isStream(t)||N.isFile(t)||N.isBlob(t))return t;if(N.isArrayBufferView(t))return t.buffer;if(N.isURLSearchParams(t))return e.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let i;if(o){if(n.indexOf("application/x-www-form-urlencoded")>-1)return function(t,e){return H(t,new ot.classes.URLSearchParams,Object.assign({visitor:function(t,e,n,r){return ot.isNode&&N.isBuffer(t)?(this.append(e,t.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},e))}(t,this.formSerializer).toString();if((i=N.isFileList(t))||n.indexOf("multipart/form-data")>-1){const e=this.env&&this.env.FormData;return H(i?{"files[]":t}:t,e&&new e,this.formSerializer)}}return o||r?(e.setContentType("application/json",!1),function(t,e,n){if(N.isString(t))try{return(0,JSON.parse)(t),N.trim(t)}catch(t){if("SyntaxError"!==t.name)throw t}return(0,JSON.stringify)(t)}(t)):t}],transformResponse:[function(t){const e=this.transitional||_t.transitional,n=e&&e.forcedJSONParsing,r="json"===this.responseType;if(t&&N.isString(t)&&(n&&!this.responseType||r)){const n=!(e&&e.silentJSONParsing)&&r;try{return JSON.parse(t)}catch(t){if(n){if("SyntaxError"===t.name)throw U.from(t,U.ERR_BAD_RESPONSE,this,null,this.response);throw t}}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ot.classes.FormData,Blob:ot.classes.Blob},validateStatus:function(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};N.forEach(["delete","get","head"],(function(t){_t.headers[t]={}})),N.forEach(["post","put","patch"],(function(t){_t.headers[t]=N.merge(At)}));const It=_t;function xt(t,e){const n=this||It,r=e||n,o=vt.from(r.headers);let i=r.data;return N.forEach(t,(function(t){i=t.call(n,i,o.normalize(),e?e.status:void 0)})),o.normalize(),i}function jt(t){return!(!t||!t.__CANCEL__)}function Dt(t){if(t.cancelToken&&t.cancelToken.throwIfRequested(),t.signal&&t.signal.aborted)throw new lt}function Tt(t){return Dt(t),t.headers=vt.from(t.headers),t.data=xt.call(t,t.transformRequest),(t.adapter||It.adapter)(t).then((function(e){return Dt(t),e.data=xt.call(t,t.transformResponse,e),e.headers=vt.from(e.headers),e}),(function(e){return jt(e)||(Dt(t),e&&e.response&&(e.response.data=xt.call(t,t.transformResponse,e.response),e.response.headers=vt.from(e.response.headers))),Promise.reject(e)}))}function Ct(t,e){e=e||{};const n={};function r(t,e){return N.isPlainObject(t)&&N.isPlainObject(e)?N.merge(t,e):N.isPlainObject(e)?N.merge({},e):N.isArray(e)?e.slice():e}function o(n){return N.isUndefined(e[n])?N.isUndefined(t[n])?void 0:r(void 0,t[n]):r(t[n],e[n])}function i(t){if(!N.isUndefined(e[t]))return r(void 0,e[t])}function a(n){return N.isUndefined(e[n])?N.isUndefined(t[n])?void 0:r(void 0,t[n]):r(void 0,e[n])}function s(n){return n in e?r(t[n],e[n]):n in t?r(void 0,t[n]):void 0}const u={url:i,method:i,data:i,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:s};return N.forEach(Object.keys(t).concat(Object.keys(e)),(function(t){const e=u[t]||o,r=e(t);N.isUndefined(r)&&e!==s||(n[t]=r)})),n}const kt={};["object","boolean","number","function","string","symbol"].forEach(((t,e)=>{kt[t]=function(n){return typeof n===t||"a"+(e<1?"n ":" ")+t}}));const Rt={};kt.transitional=function(t,e,n){function r(t,e){return"[Axios v1.1.3] Transitional option '"+t+"'"+e+(n?". "+n:"")}return(n,o,i)=>{if(!1===t)throw new U(r(o," has been removed"+(e?" in "+e:"")),U.ERR_DEPRECATED);return e&&!Rt[o]&&(Rt[o]=!0,console.warn(r(o," has been deprecated since v"+e+" and will be removed in the near future"))),!t||t(n,o,i)}};const Lt={assertOptions:function(t,e,n){if("object"!=typeof t)throw new U("options must be an object",U.ERR_BAD_OPTION_VALUE);const r=Object.keys(t);let o=r.length;for(;o-- >0;){const i=r[o],a=e[i];if(a){const e=t[i],n=void 0===e||a(e,i,t);if(!0!==n)throw new U("option "+i+" must be "+n,U.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new U("Unknown option "+i,U.ERR_BAD_OPTION)}},validators:kt},Pt=Lt.validators;class Nt{constructor(t){this.defaults=t,this.interceptors={request:new Z,response:new Z}}request(t,e){"string"==typeof t?(e=e||{}).url=t:e=t||{},e=Ct(this.defaults,e);const{transitional:n,paramsSerializer:r}=e;void 0!==n&&Lt.assertOptions(n,{silentJSONParsing:Pt.transitional(Pt.boolean),forcedJSONParsing:Pt.transitional(Pt.boolean),clarifyTimeoutError:Pt.transitional(Pt.boolean)},!1),void 0!==r&&Lt.assertOptions(r,{encode:Pt.function,serialize:Pt.function},!0),e.method=(e.method||this.defaults.method||"get").toLowerCase();const o=e.headers&&N.merge(e.headers.common,e.headers[e.method]);o&&N.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),e.headers=new vt(e.headers,o);const i=[];let a=!0;this.interceptors.request.forEach((function(t){"function"==typeof t.runWhen&&!1===t.runWhen(e)||(a=a&&t.synchronous,i.unshift(t.fulfilled,t.rejected))}));const s=[];let u;this.interceptors.response.forEach((function(t){s.push(t.fulfilled,t.rejected)}));let c,l=0;if(!a){const t=[Tt.bind(this),void 0];for(t.unshift.apply(t,i),t.push.apply(t,s),c=t.length,u=Promise.resolve(e);l<c;)u=u.then(t[l++],t[l++]);return u}c=i.length;let f=e;for(l=0;l<c;){const t=i[l++],e=i[l++];try{f=t(f)}catch(t){e.call(this,t);break}}try{u=Tt.call(this,f)}catch(t){return Promise.reject(t)}for(l=0,c=s.length;l<c;)u=u.then(s[l++],s[l++]);return u}getUri(t){return Y(st((t=Ct(this.defaults,t)).baseURL,t.url),t.params,t.paramsSerializer)}}N.forEach(["delete","get","head","options"],(function(t){Nt.prototype[t]=function(e,n){return this.request(Ct(n||{},{method:t,url:e,data:(n||{}).data}))}})),N.forEach(["post","put","patch"],(function(t){function e(e){return function(n,r,o){return this.request(Ct(o||{},{method:t,headers:e?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}Nt.prototype[t]=e(),Nt.prototype[t+"Form"]=e(!0)}));const Bt=Nt;class qt{constructor(t){if("function"!=typeof t)throw new TypeError("executor must be a function.");let e;this.promise=new Promise((function(t){e=t}));const n=this;this.promise.then((t=>{if(!n._listeners)return;let e=n._listeners.length;for(;e-- >0;)n._listeners[e](t);n._listeners=null})),this.promise.then=t=>{let e;const r=new Promise((t=>{n.subscribe(t),e=t})).then(t);return r.cancel=function(){n.unsubscribe(e)},r},t((function(t,r,o){n.reason||(n.reason=new lt(t,r,o),e(n.reason))}))}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){this.reason?t(this.reason):this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const e=this._listeners.indexOf(t);-1!==e&&this._listeners.splice(e,1)}static source(){let t;return{token:new qt((function(e){t=e})),cancel:t}}}const Ft=qt,Ut=function t(e){const n=new Bt(e),r=c(Bt.prototype.request,n);return N.extend(r,Bt.prototype,n,{allOwnKeys:!0}),N.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return t(Ct(e,n))},r}(It);Ut.Axios=Bt,Ut.CanceledError=lt,Ut.CancelToken=Ft,Ut.isCancel=jt,Ut.VERSION="1.1.3",Ut.toFormData=H,Ut.AxiosError=U,Ut.Cancel=Ut.CanceledError,Ut.all=function(t){return Promise.all(t)},Ut.spread=function(t){return function(e){return t.apply(null,e)}},Ut.isAxiosError=function(t){return N.isObject(t)&&!0===t.isAxiosError},Ut.formToJSON=t=>it(N.isHTMLForm(t)?new FormData(t):t);const Mt=Ut,{Axios:zt,AxiosError:Vt,CanceledError:Wt,isCancel:Jt,CancelToken:Ht,VERSION:$t,all:Kt,Cancel:Gt,isAxiosError:Xt,spread:Qt,toFormData:Yt}=Mt,Zt=Mt,te=class{static async create(t,e,n){let r={method:e,url:t,headers:{Accept:"application/json","Access-Control-Allow-Origin":"*"}};if("post"==e){var o=new FormData;for(let t in n)o.append(t,n[t]);r.headers["Content-Type"]="multipart/form-data",r.data=o}return await Zt(r).then((t=>t)).then((t=>t))}static get(t,e,n){Zt({method:"get",url:t,headers:{"Access-Control-Allow-Origin":"*"}}).then((t=>{"function"==typeof e&&e(t.data)})).catch((t=>{"function"==typeof n&&n(t),console.log(t)}))}static post(t,e,n,r,o){var i=new FormData;for(let t in e)i.append(t,e[t]);try{if("object"==typeof o)for(let t in o){let e=o[t];i.append(t,e)}}catch(t){console.log(t)}Zt({method:"post",url:t,data:i,headers:{Accept:"application/json","Content-Type":"multipart/form-data","Access-Control-Allow-Origin":"*"}}).then((t=>{"function"==typeof n&&n(t.data)})).catch((t=>{"function"==typeof r&&r(t),console.log(t)}))}};var ee="1.13.6",ne="object"==typeof self&&self.self===self&&self||"object"==typeof global&&global.global===global&&global||Function("return this")()||{},re=Array.prototype,oe=Object.prototype,ie="undefined"!=typeof Symbol?Symbol.prototype:null,ae=re.push,se=re.slice,ue=oe.toString,ce=oe.hasOwnProperty,le="undefined"!=typeof ArrayBuffer,fe="undefined"!=typeof DataView,de=Array.isArray,he=Object.keys,pe=Object.create,ye=le&&ArrayBuffer.isView,me=isNaN,ge=isFinite,be=!{toString:null}.propertyIsEnumerable("toString"),ve=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"],we=Math.pow(2,53)-1;function Ee(t,e){return e=null==e?t.length-1:+e,function(){for(var n=Math.max(arguments.length-e,0),r=Array(n),o=0;o<n;o++)r[o]=arguments[o+e];switch(e){case 0:return t.call(this,r);case 1:return t.call(this,arguments[0],r);case 2:return t.call(this,arguments[0],arguments[1],r)}var i=Array(e+1);for(o=0;o<e;o++)i[o]=arguments[o];return i[e]=r,t.apply(this,i)}}function Oe(t){var e=typeof t;return"function"===e||"object"===e&&!!t}function Se(t){return null===t}function Ae(t){return void 0===t}function _e(t){return!0===t||!1===t||"[object Boolean]"===ue.call(t)}function Ie(t){return!(!t||1!==t.nodeType)}function xe(t){var e="[object "+t+"]";return function(t){return ue.call(t)===e}}const je=xe("String"),De=xe("Number"),Te=xe("Date"),Ce=xe("RegExp"),ke=xe("Error"),Re=xe("Symbol"),Le=xe("ArrayBuffer");var Pe=xe("Function"),Ne=ne.document&&ne.document.childNodes;"object"!=typeof Int8Array&&"function"!=typeof Ne&&(Pe=function(t){return"function"==typeof t||!1});const Be=Pe,qe=xe("Object");var Fe=fe&&qe(new DataView(new ArrayBuffer(8))),Ue="undefined"!=typeof Map&&qe(new Map),Me=xe("DataView");const ze=Fe?function(t){return null!=t&&Be(t.getInt8)&&Le(t.buffer)}:Me,Ve=de||xe("Array");function We(t,e){return null!=t&&ce.call(t,e)}var Je=xe("Arguments");!function(){Je(arguments)||(Je=function(t){return We(t,"callee")})}();const He=Je;function $e(t){return!Re(t)&&ge(t)&&!isNaN(parseFloat(t))}function Ke(t){return De(t)&&me(t)}function Ge(t){return function(){return t}}function Xe(t){return function(e){var n=t(e);return"number"==typeof n&&n>=0&&n<=we}}function Qe(t){return function(e){return null==e?void 0:e[t]}}const Ye=Qe("byteLength"),Ze=Xe(Ye);var tn=/\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;const en=le?function(t){return ye?ye(t)&&!ze(t):Ze(t)&&tn.test(ue.call(t))}:Ge(!1),nn=Qe("length");function rn(t,e){e=function(t){for(var e={},n=t.length,r=0;r<n;++r)e[t[r]]=!0;return{contains:function(t){return!0===e[t]},push:function(n){return e[n]=!0,t.push(n)}}}(e);var n=ve.length,r=t.constructor,o=Be(r)&&r.prototype||oe,i="constructor";for(We(t,i)&&!e.contains(i)&&e.push(i);n--;)(i=ve[n])in t&&t[i]!==o[i]&&!e.contains(i)&&e.push(i)}function on(t){if(!Oe(t))return[];if(he)return he(t);var e=[];for(var n in t)We(t,n)&&e.push(n);return be&&rn(t,e),e}function an(t){if(null==t)return!0;var e=nn(t);return"number"==typeof e&&(Ve(t)||je(t)||He(t))?0===e:0===nn(on(t))}function sn(t,e){var n=on(e),r=n.length;if(null==t)return!r;for(var o=Object(t),i=0;i<r;i++){var a=n[i];if(e[a]!==o[a]||!(a in o))return!1}return!0}function un(t){return t instanceof un?t:this instanceof un?void(this._wrapped=t):new un(t)}function cn(t){return new Uint8Array(t.buffer||t,t.byteOffset||0,Ye(t))}un.VERSION=ee,un.prototype.value=function(){return this._wrapped},un.prototype.valueOf=un.prototype.toJSON=un.prototype.value,un.prototype.toString=function(){return String(this._wrapped)};var ln="[object DataView]";function fn(t,e,n,r){if(t===e)return 0!==t||1/t==1/e;if(null==t||null==e)return!1;if(t!=t)return e!=e;var o=typeof t;return("function"===o||"object"===o||"object"==typeof e)&&dn(t,e,n,r)}function dn(t,e,n,r){t instanceof un&&(t=t._wrapped),e instanceof un&&(e=e._wrapped);var o=ue.call(t);if(o!==ue.call(e))return!1;if(Fe&&"[object Object]"==o&&ze(t)){if(!ze(e))return!1;o=ln}switch(o){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!=+t?+e!=+e:0==+t?1/+t==1/e:+t==+e;case"[object Date]":case"[object Boolean]":return+t==+e;case"[object Symbol]":return ie.valueOf.call(t)===ie.valueOf.call(e);case"[object ArrayBuffer]":case ln:return dn(cn(t),cn(e),n,r)}var i="[object Array]"===o;if(!i&&en(t)){if(Ye(t)!==Ye(e))return!1;if(t.buffer===e.buffer&&t.byteOffset===e.byteOffset)return!0;i=!0}if(!i){if("object"!=typeof t||"object"!=typeof e)return!1;var a=t.constructor,s=e.constructor;if(a!==s&&!(Be(a)&&a instanceof a&&Be(s)&&s instanceof s)&&"constructor"in t&&"constructor"in e)return!1}r=r||[];for(var u=(n=n||[]).length;u--;)if(n[u]===t)return r[u]===e;if(n.push(t),r.push(e),i){if((u=t.length)!==e.length)return!1;for(;u--;)if(!fn(t[u],e[u],n,r))return!1}else{var c,l=on(t);if(u=l.length,on(e).length!==u)return!1;for(;u--;)if(!We(e,c=l[u])||!fn(t[c],e[c],n,r))return!1}return n.pop(),r.pop(),!0}function hn(t,e){return fn(t,e)}function pn(t){if(!Oe(t))return[];var e=[];for(var n in t)e.push(n);return be&&rn(t,e),e}function yn(t){var e=nn(t);return function(n){if(null==n)return!1;var r=pn(n);if(nn(r))return!1;for(var o=0;o<e;o++)if(!Be(n[t[o]]))return!1;return t!==wn||!Be(n[mn])}}var mn="forEach",gn=["clear","delete"],bn=["get","has","set"],vn=gn.concat(mn,bn),wn=gn.concat(bn),En=["add"].concat(gn,mn,"has");const On=Ue?yn(vn):xe("Map"),Sn=Ue?yn(wn):xe("WeakMap"),An=Ue?yn(En):xe("Set"),_n=xe("WeakSet");function In(t){for(var e=on(t),n=e.length,r=Array(n),o=0;o<n;o++)r[o]=t[e[o]];return r}function xn(t){for(var e=on(t),n=e.length,r=Array(n),o=0;o<n;o++)r[o]=[e[o],t[e[o]]];return r}function jn(t){for(var e={},n=on(t),r=0,o=n.length;r<o;r++)e[t[n[r]]]=n[r];return e}function Dn(t){var e=[];for(var n in t)Be(t[n])&&e.push(n);return e.sort()}function Tn(t,e){return function(n){var r=arguments.length;if(e&&(n=Object(n)),r<2||null==n)return n;for(var o=1;o<r;o++)for(var i=arguments[o],a=t(i),s=a.length,u=0;u<s;u++){var c=a[u];e&&void 0!==n[c]||(n[c]=i[c])}return n}}const Cn=Tn(pn),kn=Tn(on),Rn=Tn(pn,!0);function Ln(t){if(!Oe(t))return{};if(pe)return pe(t);var e=function(){};e.prototype=t;var n=new e;return e.prototype=null,n}function Pn(t,e){var n=Ln(t);return e&&kn(n,e),n}function Nn(t){return Oe(t)?Ve(t)?t.slice():Cn({},t):t}function Bn(t,e){return e(t),t}function qn(t){return Ve(t)?t:[t]}function Fn(t){return un.toPath(t)}function Un(t,e){for(var n=e.length,r=0;r<n;r++){if(null==t)return;t=t[e[r]]}return n?t:void 0}function Mn(t,e,n){var r=Un(t,Fn(e));return Ae(r)?n:r}function zn(t,e){for(var n=(e=Fn(e)).length,r=0;r<n;r++){var o=e[r];if(!We(t,o))return!1;t=t[o]}return!!n}function Vn(t){return t}function Wn(t){return t=kn({},t),function(e){return sn(e,t)}}function Jn(t){return t=Fn(t),function(e){return Un(e,t)}}function Hn(t,e,n){if(void 0===e)return t;switch(null==n?3:n){case 1:return function(n){return t.call(e,n)};case 3:return function(n,r,o){return t.call(e,n,r,o)};case 4:return function(n,r,o,i){return t.call(e,n,r,o,i)}}return function(){return t.apply(e,arguments)}}function $n(t,e,n){return null==t?Vn:Be(t)?Hn(t,e,n):Oe(t)&&!Ve(t)?Wn(t):Jn(t)}function Kn(t,e){return $n(t,e,1/0)}function Gn(t,e,n){return un.iteratee!==Kn?un.iteratee(t,e):$n(t,e,n)}function Xn(t,e,n){e=Gn(e,n);for(var r=on(t),o=r.length,i={},a=0;a<o;a++){var s=r[a];i[s]=e(t[s],s,t)}return i}function Qn(){}function Yn(t){return null==t?Qn:function(e){return Mn(t,e)}}function Zn(t,e,n){var r=Array(Math.max(0,t));e=Hn(e,n,1);for(var o=0;o<t;o++)r[o]=e(o);return r}function tr(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))}un.toPath=qn,un.iteratee=Kn;const er=Date.now||function(){return(new Date).getTime()};function nr(t){var e=function(e){return t[e]},n="(?:"+on(t).join("|")+")",r=RegExp(n),o=RegExp(n,"g");return function(t){return t=null==t?"":""+t,r.test(t)?t.replace(o,e):t}}const rr={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},or=nr(rr),ir=nr(jn(rr)),ar=un.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var sr=/(.)^/,ur={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},cr=/\\|'|\r|\n|\u2028|\u2029/g;function lr(t){return"\\"+ur[t]}var fr=/^\s*(\w|\$)+\s*$/;function dr(t,e,n){!e&&n&&(e=n),e=Rn({},e,un.templateSettings);var r=RegExp([(e.escape||sr).source,(e.interpolate||sr).source,(e.evaluate||sr).source].join("|")+"|$","g"),o=0,i="__p+='";t.replace(r,(function(e,n,r,a,s){return i+=t.slice(o,s).replace(cr,lr),o=s+e.length,n?i+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?i+="'+\n((__t=("+r+"))==null?'':__t)+\n'":a&&(i+="';\n"+a+"\n__p+='"),e})),i+="';\n";var a,s=e.variable;if(s){if(!fr.test(s))throw new Error("variable is not a bare identifier: "+s)}else i="with(obj||{}){\n"+i+"}\n",s="obj";i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{a=new Function(s,"_",i)}catch(t){throw t.source=i,t}var u=function(t){return a.call(this,t,un)};return u.source="function("+s+"){\n"+i+"}",u}function hr(t,e,n){var r=(e=Fn(e)).length;if(!r)return Be(n)?n.call(t):n;for(var o=0;o<r;o++){var i=null==t?void 0:t[e[o]];void 0===i&&(i=n,o=r),t=Be(i)?i.call(t):i}return t}var pr=0;function yr(t){var e=++pr+"";return t?t+e:e}function mr(t){var e=un(t);return e._chain=!0,e}function gr(t,e,n,r,o){if(!(r instanceof e))return t.apply(n,o);var i=Ln(t.prototype),a=t.apply(i,o);return Oe(a)?a:i}var br=Ee((function(t,e){var n=br.placeholder,r=function(){for(var o=0,i=e.length,a=Array(i),s=0;s<i;s++)a[s]=e[s]===n?arguments[o++]:e[s];for(;o<arguments.length;)a.push(arguments[o++]);return gr(t,r,this,this,a)};return r}));br.placeholder=un;const vr=br,wr=Ee((function(t,e,n){if(!Be(t))throw new TypeError("Bind must be called on a function");var r=Ee((function(o){return gr(t,r,e,this,n.concat(o))}));return r})),Er=Xe(nn);function Or(t,e,n,r){if(r=r||[],e||0===e){if(e<=0)return r.concat(t)}else e=1/0;for(var o=r.length,i=0,a=nn(t);i<a;i++){var s=t[i];if(Er(s)&&(Ve(s)||He(s)))if(e>1)Or(s,e-1,n,r),o=r.length;else for(var u=0,c=s.length;u<c;)r[o++]=s[u++];else n||(r[o++]=s)}return r}const Sr=Ee((function(t,e){var n=(e=Or(e,!1,!1)).length;if(n<1)throw new Error("bindAll must be passed function names");for(;n--;){var r=e[n];t[r]=wr(t[r],t)}return t}));function Ar(t,e){var n=function(r){var o=n.cache,i=""+(e?e.apply(this,arguments):r);return We(o,i)||(o[i]=t.apply(this,arguments)),o[i]};return n.cache={},n}const _r=Ee((function(t,e,n){return setTimeout((function(){return t.apply(null,n)}),e)})),Ir=vr(_r,un,1);function xr(t,e,n){var r,o,i,a,s=0;n||(n={});var u=function(){s=!1===n.leading?0:er(),r=null,a=t.apply(o,i),r||(o=i=null)},c=function(){var c=er();s||!1!==n.leading||(s=c);var l=e-(c-s);return o=this,i=arguments,l<=0||l>e?(r&&(clearTimeout(r),r=null),s=c,a=t.apply(o,i),r||(o=i=null)):r||!1===n.trailing||(r=setTimeout(u,l)),a};return c.cancel=function(){clearTimeout(r),s=0,r=o=i=null},c}function jr(t,e,n){var r,o,i,a,s,u=function(){var c=er()-o;e>c?r=setTimeout(u,e-c):(r=null,n||(a=t.apply(s,i)),r||(i=s=null))},c=Ee((function(c){return s=this,i=c,o=er(),r||(r=setTimeout(u,e),n&&(a=t.apply(s,i))),a}));return c.cancel=function(){clearTimeout(r),r=i=s=null},c}function Dr(t,e){return vr(e,t)}function Tr(t){return function(){return!t.apply(this,arguments)}}function Cr(){var t=arguments,e=t.length-1;return function(){for(var n=e,r=t[e].apply(this,arguments);n--;)r=t[n].call(this,r);return r}}function kr(t,e){return function(){if(--t<1)return e.apply(this,arguments)}}function Rr(t,e){var n;return function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=null),n}}const Lr=vr(Rr,2);function Pr(t,e,n){e=Gn(e,n);for(var r,o=on(t),i=0,a=o.length;i<a;i++)if(e(t[r=o[i]],r,t))return r}function Nr(t){return function(e,n,r){n=Gn(n,r);for(var o=nn(e),i=t>0?0:o-1;i>=0&&i<o;i+=t)if(n(e[i],i,e))return i;return-1}}const Br=Nr(1),qr=Nr(-1);function Fr(t,e,n,r){for(var o=(n=Gn(n,r,1))(e),i=0,a=nn(t);i<a;){var s=Math.floor((i+a)/2);n(t[s])<o?i=s+1:a=s}return i}function Ur(t,e,n){return function(r,o,i){var a=0,s=nn(r);if("number"==typeof i)t>0?a=i>=0?i:Math.max(i+s,a):s=i>=0?Math.min(i+1,s):i+s+1;else if(n&&i&&s)return r[i=n(r,o)]===o?i:-1;if(o!=o)return(i=e(se.call(r,a,s),Ke))>=0?i+a:-1;for(i=t>0?a:s-1;i>=0&&i<s;i+=t)if(r[i]===o)return i;return-1}}const Mr=Ur(1,Br,Fr),zr=Ur(-1,qr);function Vr(t,e,n){var r=(Er(t)?Br:Pr)(t,e,n);if(void 0!==r&&-1!==r)return t[r]}function Wr(t,e){return Vr(t,Wn(e))}function Jr(t,e,n){var r,o;if(e=Hn(e,n),Er(t))for(r=0,o=t.length;r<o;r++)e(t[r],r,t);else{var i=on(t);for(r=0,o=i.length;r<o;r++)e(t[i[r]],i[r],t)}return t}function Hr(t,e,n){e=Gn(e,n);for(var r=!Er(t)&&on(t),o=(r||t).length,i=Array(o),a=0;a<o;a++){var s=r?r[a]:a;i[a]=e(t[s],s,t)}return i}function $r(t){var e=function(e,n,r,o){var i=!Er(e)&&on(e),a=(i||e).length,s=t>0?0:a-1;for(o||(r=e[i?i[s]:s],s+=t);s>=0&&s<a;s+=t){var u=i?i[s]:s;r=n(r,e[u],u,e)}return r};return function(t,n,r,o){var i=arguments.length>=3;return e(t,Hn(n,o,4),r,i)}}const Kr=$r(1),Gr=$r(-1);function Xr(t,e,n){var r=[];return e=Gn(e,n),Jr(t,(function(t,n,o){e(t,n,o)&&r.push(t)})),r}function Qr(t,e,n){return Xr(t,Tr(Gn(e)),n)}function Yr(t,e,n){e=Gn(e,n);for(var r=!Er(t)&&on(t),o=(r||t).length,i=0;i<o;i++){var a=r?r[i]:i;if(!e(t[a],a,t))return!1}return!0}function Zr(t,e,n){e=Gn(e,n);for(var r=!Er(t)&&on(t),o=(r||t).length,i=0;i<o;i++){var a=r?r[i]:i;if(e(t[a],a,t))return!0}return!1}function to(t,e,n,r){return Er(t)||(t=In(t)),("number"!=typeof n||r)&&(n=0),Mr(t,e,n)>=0}const eo=Ee((function(t,e,n){var r,o;return Be(e)?o=e:(e=Fn(e),r=e.slice(0,-1),e=e[e.length-1]),Hr(t,(function(t){var i=o;if(!i){if(r&&r.length&&(t=Un(t,r)),null==t)return;i=t[e]}return null==i?i:i.apply(t,n)}))}));function no(t,e){return Hr(t,Jn(e))}function ro(t,e){return Xr(t,Wn(e))}function oo(t,e,n){var r,o,i=-1/0,a=-1/0;if(null==e||"number"==typeof e&&"object"!=typeof t[0]&&null!=t)for(var s=0,u=(t=Er(t)?t:In(t)).length;s<u;s++)null!=(r=t[s])&&r>i&&(i=r);else e=Gn(e,n),Jr(t,(function(t,n,r){((o=e(t,n,r))>a||o===-1/0&&i===-1/0)&&(i=t,a=o)}));return i}function io(t,e,n){var r,o,i=1/0,a=1/0;if(null==e||"number"==typeof e&&"object"!=typeof t[0]&&null!=t)for(var s=0,u=(t=Er(t)?t:In(t)).length;s<u;s++)null!=(r=t[s])&&r<i&&(i=r);else e=Gn(e,n),Jr(t,(function(t,n,r){((o=e(t,n,r))<a||o===1/0&&i===1/0)&&(i=t,a=o)}));return i}var ao=/[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;function so(t){return t?Ve(t)?se.call(t):je(t)?t.match(ao):Er(t)?Hr(t,Vn):In(t):[]}function uo(t,e,n){if(null==e||n)return Er(t)||(t=In(t)),t[tr(t.length-1)];var r=so(t),o=nn(r);e=Math.max(Math.min(e,o),0);for(var i=o-1,a=0;a<e;a++){var s=tr(a,i),u=r[a];r[a]=r[s],r[s]=u}return r.slice(0,e)}function co(t){return uo(t,1/0)}function lo(t,e,n){var r=0;return e=Gn(e,n),no(Hr(t,(function(t,n,o){return{value:t,index:r++,criteria:e(t,n,o)}})).sort((function(t,e){var n=t.criteria,r=e.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(n<r||void 0===r)return-1}return t.index-e.index})),"value")}function fo(t,e){return function(n,r,o){var i=e?[[],[]]:{};return r=Gn(r,o),Jr(n,(function(e,o){var a=r(e,o,n);t(i,e,a)})),i}}const ho=fo((function(t,e,n){We(t,n)?t[n].push(e):t[n]=[e]})),po=fo((function(t,e,n){t[n]=e})),yo=fo((function(t,e,n){We(t,n)?t[n]++:t[n]=1})),mo=fo((function(t,e,n){t[n?0:1].push(e)}),!0);function go(t){return null==t?0:Er(t)?t.length:on(t).length}function bo(t,e,n){return e in n}const vo=Ee((function(t,e){var n={},r=e[0];if(null==t)return n;Be(r)?(e.length>1&&(r=Hn(r,e[1])),e=pn(t)):(r=bo,e=Or(e,!1,!1),t=Object(t));for(var o=0,i=e.length;o<i;o++){var a=e[o],s=t[a];r(s,a,t)&&(n[a]=s)}return n})),wo=Ee((function(t,e){var n,r=e[0];return Be(r)?(r=Tr(r),e.length>1&&(n=e[1])):(e=Hr(Or(e,!1,!1),String),r=function(t,n){return!to(e,n)}),vo(t,r,n)}));function Eo(t,e,n){return se.call(t,0,Math.max(0,t.length-(null==e||n?1:e)))}function Oo(t,e,n){return null==t||t.length<1?null==e||n?void 0:[]:null==e||n?t[0]:Eo(t,t.length-e)}function So(t,e,n){return se.call(t,null==e||n?1:e)}function Ao(t,e,n){return null==t||t.length<1?null==e||n?void 0:[]:null==e||n?t[t.length-1]:So(t,Math.max(0,t.length-e))}function _o(t){return Xr(t,Boolean)}function Io(t,e){return Or(t,e,!1)}const xo=Ee((function(t,e){return e=Or(e,!0,!0),Xr(t,(function(t){return!to(e,t)}))})),jo=Ee((function(t,e){return xo(t,e)}));function Do(t,e,n,r){_e(e)||(r=n,n=e,e=!1),null!=n&&(n=Gn(n,r));for(var o=[],i=[],a=0,s=nn(t);a<s;a++){var u=t[a],c=n?n(u,a,t):u;e&&!n?(a&&i===c||o.push(u),i=c):n?to(i,c)||(i.push(c),o.push(u)):to(o,u)||o.push(u)}return o}const To=Ee((function(t){return Do(Or(t,!0,!0))}));function Co(t){for(var e=[],n=arguments.length,r=0,o=nn(t);r<o;r++){var i=t[r];if(!to(e,i)){var a;for(a=1;a<n&&to(arguments[a],i);a++);a===n&&e.push(i)}}return e}function ko(t){for(var e=t&&oo(t,nn).length||0,n=Array(e),r=0;r<e;r++)n[r]=no(t,r);return n}const Ro=Ee(ko);function Lo(t,e){for(var n={},r=0,o=nn(t);r<o;r++)e?n[t[r]]=e[r]:n[t[r][0]]=t[r][1];return n}function Po(t,e,n){null==e&&(e=t||0,t=0),n||(n=e<t?-1:1);for(var r=Math.max(Math.ceil((e-t)/n),0),o=Array(r),i=0;i<r;i++,t+=n)o[i]=t;return o}function No(t,e){if(null==e||e<1)return[];for(var n=[],r=0,o=t.length;r<o;)n.push(se.call(t,r,r+=e));return n}function Bo(t,e){return t._chain?un(e).chain():e}function qo(t){return Jr(Dn(t),(function(e){var n=un[e]=t[e];un.prototype[e]=function(){var t=[this._wrapped];return ae.apply(t,arguments),Bo(this,n.apply(un,t))}})),un}Jr(["pop","push","reverse","shift","sort","splice","unshift"],(function(t){var e=re[t];un.prototype[t]=function(){var n=this._wrapped;return null!=n&&(e.apply(n,arguments),"shift"!==t&&"splice"!==t||0!==n.length||delete n[0]),Bo(this,n)}})),Jr(["concat","join","slice"],(function(t){var e=re[t];un.prototype[t]=function(){var t=this._wrapped;return null!=t&&(t=e.apply(t,arguments)),Bo(this,t)}}));const Fo=un;var Uo=qo(t);Uo._=Uo;class Mo{db;subscribers={};lastTable="";lastTablePk;constructor(t,e){this.db=new u(t,e)}subscribe(t,e){this.subscribers[t]=e}update(t,e,n){const r=this.db.update(t,e,n);return this.lastTable=t,this.lastTablePk=r,r}insert(t,e){return this.db.insert(t,e)}queryAll(t,e){return this.db.queryAll(t,e)}getRow(t,e){return this.db.queryAll(t,{ID:e})[0]}commit(){const t=this.db.commit();if(""!==this.lastTable&&"function"==typeof this.subscribers[this.lastTable]){const t=this.getRow(this.lastTable,this.lastTablePk);this.subscribers[this.lastTable](t),this.lastTable="",this.lastTablePk=-1}return t}getStoreDB(){return this.db}isNew(t){return this.db.isNew(t)}createTable(t,e){return this.db.createTable(t,e)}tableExists(t){return this.db.tableExists(t)}}class zo{static __db__;static db(){return void 0===zo.__db__&&(zo.__db__=new Mo("learning","local")),zo.__db__}static init(){const t=zo.db();t.isNew((e=>{if(e){const e={course:["title","slug","duration","sourceCodeRepository","description","authorIds"],author:["name","slug","biography","shortBiography","courseIds"],exerciseFile:["courseId","name","url","size"],section:["courseId","slug","title"],toc:["sectionId","title","slug","url","duration","captionUrl","captionFmt","streamLocationIds"],streamLocation:["tocId","fmt","url"],downloadConfig:["courseId","fmtList","selectedFmtList"],downloads:["tocId","courseId","downloadId","filename","url","status"],downloadState:["courseId","state","total","success","fails"],app:["version","state","lastCourseSlug","nav"]};Object.keys(e).forEach((n=>{t.tableExists(n)||t.createTable(n,e[n])})),t.commit()}}))}static getExerciseFile(t){const e=zo.db().queryAll("exerciseFile",{query:{courseId:t}});return e.length>0?e[0]:null}static getCourse(t){const e=zo.db().queryAll("course",{query:{slug:t}});return e.length>0?e[0]:null}static getLastCourses(t){const e=zo.db();if(void 0===t){const e=zo.getAppState();t=e.lastCourseSlug}return e.queryAll("course",{query:e=>{if(e.slug!==t)return!0}})}static getCourseById(t){const e=zo.db().queryAll("course",{query:{ID:t}});return e.length>0?e[0]:null}static getSection(t,e){const n=zo.db().queryAll("section",{query:{slug:t,courseId:e}});return n.length>0?n[0]:null}static getSectionsByCourseId(t){return zo.db().queryAll("section",{query:{courseId:t}})}static getTocsBySectionId(t){return zo.db().queryAll("toc",{query:{sectionId:t}})}static getToc(t,e){const n=zo.db().queryAll("toc",{query:{slug:t,sectionId:e}});return n.length>0?n[0]:null}static getAuthor(t){const e=zo.db().queryAll("author",{query:{slug:t}});return e.length>0?e[0]:null}static getAuthorById(t){const e=zo.db().queryAll("author",{query:{ID:t}});return e.length>0?e[0]:null}static getDownloadConfig(t){const e=zo.db().queryAll("downloadConfig",{query:{courseId:t}});return e.length>0?e[0]:null}static createAuthor(t,e,n,r,o){const i=zo.db();let a=zo.getAuthor(e);if(a){const t=a.courseIds;t.includes(o)||(t.push(o),i.update("author",{slug:e},(e=>(e.courseIds=t,e))),setTimeout((()=>{i.commit()}),100),a.courseIds=t)}else{const s=[];"number"==typeof o&&s.push(o),a={ID:0,name:t,slug:e,biography:n,shortBiography:r,courseIds:s},a.ID=i.insert("author",a),setTimeout((()=>{i.commit()}),100)}return a}static createAuthorList(t,e){const n=zo.db(),r=zo.getCourse(t),o=[];if(r){let i=r.authorIds;e.map((t=>{const e=function(t){for(var e=t.split("-"),n=0;n<e.length;n++){var r=e[n];e[n]=r.charAt(0).toUpperCase()+r.slice(1)}return e.join(" ")}(t.slug),n=zo.createAuthor(e,t.slug,t.biography,t.shortBiography,r.ID);i.includes(n.ID)||i.push(n.ID),o.push(n)})),n.update("course",{slug:t},(t=>(t.authorIds=i,t))),n.commit()}return o}static updateTocCaption(t,e,n,r){const o=zo.db();zo.getToc(t,r)&&(o.update("toc",{slug:t},(function(t){return t.captionUrl=e,t.captionFmt=n,t})),o.commit())}static getStreamLocation(t,e){const n=zo.db().queryAll("streamLocation",{query:{tocId:t,fmt:e}});return n.length>0?n[0]:null}static getStreamLocations(t){return zo.db().queryAll("streamLocation",{query:{tocId:t}})}static createStreamLocation(t,e,n){const r=zo.db();let o=zo.getStreamLocation(t,e);return o?(o.url=n,r.update("streamLocation",(t=>(t.url=n,t)))):(o={ID:0,tocId:t,fmt:e,url:n},o.ID=r.insert("streamLocation",o)),setTimeout((()=>r.commit()),100),o}static updateDownloadConfig(t,e,n){const r=zo.db();let o=zo.getDownloadConfig(n);return o?r.update("downloadConfig",{courseId:n},(n=>(n[t]=e,n))):(o={ID:0,courseId:n,fmtList:[],selectedFmtList:""},o[t]=e,o.ID=r.insert("downloadConfig",o)),setTimeout((()=>r.commit()),100),o}static createStreamLocationList(t,e,n,r){const o=zo.db(),i=zo.getToc(t,e),a=[],s=[];if(i){const e=i.streamLocationIds;n.map((t=>{s.includes(t.fmt)||s.push(t.fmt);const n=zo.createStreamLocation(i.ID,t.fmt,t.url);e.includes(n.ID)||e.push(n.ID),a.push(n)})),o.update("toc",{slug:t},(t=>(t.streamLocationIds=e,t))),o.commit(),r&&zo.updateDownloadConfig("fmtList",s,r)}return a}static createExerciseFile(t,e,n,r){const o=zo.db();let i=zo.getExerciseFile(t);return i||(i={ID:0,courseId:t,name:e,url:n,size:r},i.ID=o.insert("exerciseFile",i),o.commit()),i}static createSection(t,e){const n=zo.db(),r=e.replace(/\W+/g," ").split(" ").join("-").toLowerCase();let o=zo.getSection(r,t);return o||(o={ID:0,courseId:t,title:e,slug:r},o.ID=n.insert("section",o),n.commit()),o}static createToc(t,e,n,r,o,i,a){const s=zo.db();let u=zo.getToc(n,t);return u||(u={ID:0,sectionId:t,title:e,slug:n,url:r,duration:o,captionUrl:i,captionFmt:a,streamLocationIds:[]},u.ID=s.insert("toc",u),s.commit()),u}static createCourse(t,e,n,r,o){const i=zo.db();let a=zo.getCourse(e);return a||(a={ID:0,title:t,slug:e,duration:n,sourceCodeRepository:r,description:o,authorIds:[]},a.ID=i.insert("course",a),i.commit()),a}static getCourseJson(t){te.get("/data/course.json",(e=>{"function"==typeof t&&t(e)}))}static getDataCodesLS(t){setTimeout((()=>{chrome.storage.sync.get(["dataCodes"],(e=>{t(JSON.parse(e.dataCodes))}))}),1e3)}static saveDataCodes(t){const e=t.course,n=e.authors,r=zo.createCourse(e.title,e.slug,e.duration,e.sourceCodeRepository,e.description);return t.sections.map((t=>{const e=zo.createSection(r.ID,t.title);t.items.map((t=>{t.url=`https://www.linkedin.com/learning/${r.slug}/${t.slug}`,zo.createToc(e.ID,t.title,t.slug,t.url,t.duration)}))})),zo.createAuthorList(r.slug,n),zo.setAppState(1,r.slug),r}static prepareAppStorage(){zo.init(),setTimeout((()=>{zo.initApp("")}),1250)}static initApp(t){const e=zo.db(),n="1.0",r=e.queryAll("app",{query:{version:n}});let o=null;return 0===r.length?(o={ID:0,state:0,version:n,lastCourseSlug:t,nav:"welcome"},o.ID=e.insert("app",o),e.commit()):(o=r[0],o.lastCourseSlug!==t&&""!==t&&(o.lastCourseSlug=t,e.update("app",{version:n},(e=>(e.lastCourseSlug=t,e))),e.commit())),o}static getAppState(){const t=zo.db().queryAll("app",{query:{version:"1.0"}});let e=null;return t.length>0&&(e=t[0]),e}static setAppState(t,e){const n=zo.db();n.queryAll("app",{query:{version:"1.0"}}).length>0&&(n.update("app",{version:"1.0"},(n=>(n.state=t,void 0!==e&&(n.lastCourseSlug=e),n))),n.commit())}static setAppNav(t){const e=zo.db();e.queryAll("app",{query:{version:"1.0"}}).length>0&&(e.update("app",{version:"1.0"},(e=>(e.nav=t,e))),e.commit())}static getAppInfo(){const t=zo.db().queryAll("app",{query:{version:"1.0"}});return t.length>0?t[0]:null}static getDownloadState(t){const e=zo.db();let n=null;const r=e.queryAll("downloadState",{query:{courseId:t}});return r.length>0?n=r[0]:(n={ID:0,courseId:t,state:0},n.ID=e.insert("downloadState",n),e.commit()),n}static setDownloadState(t,e){const n=zo.db();let r=null;const o=n.queryAll("downloadState",{query:{courseId:t}});return o.length>0?(r=o[0],n.update("downloadState",{courseId:t},(t=>(t.state=e,t))),n.commit(),r.state=e):(r={ID:0,courseId:t,state:e},r.ID=n.insert("downloadState",r),n.commit()),r}static getDownloads(t,e){return zo.db().queryAll("downloads",{query:{tocId:t,courseId:e}})}static getDownloadById(t){const e=zo.db().queryAll("downloads",{query:{ID:t}});return e.length>0?e[0]:null}static createDownload(t,e,n,r){const o=zo.db();let i=zo.getDownload(n,e);return i||(i={ID:0,tocId:n,courseId:r,downloadId:0,filename:e,url:t,status:!1},i.ID=o.insert("downloads",i)),i}static updateDownload(t,e){const n=zo.db();let r=zo.getDownloadById(t);return r&&n.update("downloads",{ID:t},(t=>{for(let n in e)t[n]=e[n],r[n]=e[n];return t})),r}static getDownload(t,e){let n=null;const r=zo.db().queryAll("downloads",{query:{tocId:t,filename:e}});return r.length>0&&(n=r[0]),n}static getDownloadByCourseId(t){return zo.db().queryAll("downloads",{query:{courseId:t}})}}zo.prepareAppStorage();const Vo=zo;function Wo(t){const e=t.split("?")[0].split("/").filter((t=>t));let n=!1;return e.length>=4&&"learning"===e[2]&&(n=!0),n}function Jo(){chrome.cookies.getAll({domain:"linkedin.com"},(function(t){chrome.tabs.query({active:!0,currentWindow:!0},(function(e){try{const n=e[0];chrome.tabs.sendMessage(n.id,{event:"sendCoookie",cookie:t},(t=>{}))}catch(t){}}))}))}Vo.prepareAppStorage(),chrome.tabs.onUpdated.addListener(((t,e,n)=>{"complete"==e.status&&Wo(n.url)&&(chrome.tabs.sendMessage(n.id,{event:"onTabUpdated",url:n.url},(t=>{})),Jo())})),chrome.webNavigation.onHistoryStateUpdated.addListener((function(t){Wo(t.url)&&(chrome.tabs.sendMessage(t.tabId,{event:"onHistoryStateUpdated",url:t.url},(t=>{})),Jo())}));let Ho=[],$o=0,Ko=[],Go=null,Xo=!1,Qo=!1;function Yo(){Zo()}function Zo(){if(Ho.length>0){if(Go=Ho.shift(),!0===Go.status){const t="download_state",e=!0;return chrome.runtime.sendMessage({cmd:t,skip:e,currentDownload:Go},(t=>{})),void Zo()}!function(){Xo||(chrome.downloads.onCreated.addListener((t=>{console.log(t)})),chrome.downloads.onErased.addListener((t=>{console.log(t)})),chrome.downloads.onChanged.addListener((t=>{if(console.log(t),"object"==typeof t.state&&"complete"==t.state.current){const e="download_state",n=!0;chrome.runtime.sendMessage({cmd:e,success:n,delta:t,currentDownload:Go},(t=>{})),Ko.push(Go),Vo.updateDownload(Go.ID,{status:!0}),Vo.db().commit(),function(){const t=Ko.length,e=$o,n=Math.ceil(t/e*100);console.log(n)}(),Yo()}"object"==typeof t.error&&function(t){chrome.runtime.sendMessage({cmd:"download_state",delta:t,success:!1,currentDownload:Go},(t=>{})),Qo=!1,$o=0,Ho=[],Ko=[],Go=null,Qo=!1}(t)})),Xo=!0);const t={filename:Go.filename,url:Go.url};chrome.downloads.download(t,(t=>{console.log(t)}))}()}else $o=0,Ho=[],Ko=[],Go=null,Qo=!1,Vo.db().getStoreDB().truncate("downloads"),Vo.db().commit()}chrome.runtime.onMessage.addListener(((t,e,n)=>{if("start_download"==t.cmd){if(Qo)return void console.log("queue is running:skipped");console.log(t),0==Ho.length&&(Ho=function(){Ho=[],$o=0,Ko=[],Go=null;const t=Vo.getAppState(),e=Vo.getCourse(t.lastCourseSlug),n=(Vo.getDownloadState(e.ID),Vo.getDownloadConfig(e.ID)),r=Vo.getSectionsByCourseId(e.ID),o=n.selectedFmtList,i=[];r.forEach((t=>{Vo.getTocsBySectionId(t.ID).forEach((t=>{const n=Vo.getStreamLocations(t.ID).filter((t=>t.fmt==o));let r;if(n.length>0){r=n[0];const a=r.url,s=t.captionUrl,u={url:a,filename:`${t.slug}-${o}.mp4`,tocId:t.ID,courseId:e.ID},c={url:s,filename:`${t.slug}-${o}.vtt`,tocId:t.ID,courseId:e.ID};i.push(u),i.push(c)}}))}));for(let t in i){const e=i[t];let n=Vo.getDownload(e.tocId,e.filename);n?(console.log("updateDownload"),n.url=e.url,n.filename=e.filename,n=Vo.updateDownload(n.ID,n)):(console.log("createDownload"),n=Vo.createDownload(e.url,e.filename,e.tocId,e.courseId)),Ho.push(n)}return Vo.db().commit(),Ho}(),$o=Ho.length),Qo=!0,Yo()}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,