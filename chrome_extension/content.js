(()=>{"use strict";function e(){const e=window.location.pathname.split("/").filter((e=>e)),t=location.search.substring(1);return{pathArray:e,queryStringObject:JSON.parse('{"'+t.replace(/&/g,'","').replace(/=/g,'":"')+'"}',(function(e,t){return""===e?t:decodeURIComponent(t)}))}}chrome.runtime.onMessage.addListener((function(t,o){if(console.log(t),void 0!==t.event)if("onHistoryStateUpdated"==t.event||"onTabUpdated"==t.event)(function(){const t=e().pathArray;let o=!1;return t.length>=2&&"learning"===t[0]&&"topics"!==t[1]&&"search"!==t[1]&&(o=!0),o})()&&(localStorage.activeUrl=t.url,chrome.storage.sync.set({activeUrl:t.url}),function(){const t=e(),o=t.pathArray,a=t.queryStringObject;let n=!1;void 0!==a.autoplay&&"true"==a.autoplay&&(a.autoplay="false",n=!0),void 0!==a.resume?"true"==a.resume&&(a.resume="false",n=!0):(a.resume="false",n=!0);let r=`/${o[0]}/${o[1]}`,s=0;for(let e in a)r+=0==s?"?":"&",r+=`${e}=${a[e]}`,s+=1;n&&(window.location.href=r)}());else if("sendCoookie"==t.event){const e=JSON.stringify(t.cookie);localStorage.activeCookie=e,chrome.storage.sync.set({activeCookie:e})}else if("SaveDataCodesToLS"==t.event){let e=document.getElementById("dataCodes");if(null!==e){let t=e.getAttribute("data");localStorage.dataCodes=t,chrome.storage.sync.set({dataCodes:t})}}else"ContentConsoleLog"==t.event&&console.log("Popup.log:",t.param)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,