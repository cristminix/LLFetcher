(()=>{"use strict";function e(){const e=window.location.pathname.split("/").filter((e=>e)),t=location.search.substring(1);return{pathArray:e,queryStringObject:JSON.parse('{"'+t.replace(/&/g,'","').replace(/=/g,'":"')+'"}',(function(e,t){return""===e?t:decodeURIComponent(t)}))}}chrome.runtime.onMessage.addListener((function(t,o){if(console.log(t),void 0!==t.event)if("onHistoryStateUpdated"==t.event||"onTabUpdated"==t.event)(function(){const t=e().pathArray;let o=!1;return t.length>=2&&"learning"===t[0]&&"topics"!==t[1]&&"search"!==t[1]&&(o=!0),o})()&&(localStorage.activeUrl=t.url,chrome.storage.sync.set({activeUrl:t.url}),function(){const t=e(),o=t.pathArray,a=t.queryStringObject;let n=!1;void 0!==a.autoplay&&"true"==a.autoplay&&(a.autoplay="false",n=!0),void 0!==a.resume?"true"==a.resume&&(a.resume="false",n=!0):(a.resume="false",n=!0);let r=`/${o[0]}/${o[1]}`,s=0;for(let e in a)r+=0==s?"?":"&",r+=`${e}=${a[e]}`,s+=1;n&&(window.location.href=r)}());else if("sendCoookie"==t.event){const e=JSON.stringify(t.cookie);localStorage.activeCookie=e,chrome.storage.sync.set({activeCookie:e})}else if("SaveDataCodesToLS"==t.event){let e=document.getElementById("dataCodes");if(null!==e){let t=e.getAttribute("data");localStorage.dataCodes=t,chrome.storage.sync.set({dataCodes:t})}}else"ContentConsoleLog"==t.event&&console.log("Popup.log:",t.param)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC5qcyIsIm1hcHBpbmdzIjoibUJBQUEsU0FBU0EsSUFDTCxNQUFNQyxFQUFhQyxPQUFPQyxTQUFTQyxTQUFTQyxNQUFNLEtBQUtDLFFBQU9DLEdBQVFBLElBQ2hFQyxFQUFVTCxTQUFTTSxPQUFPQyxVQUFVLEdBRTFDLE1BQU8sQ0FDSEMsVUFBV1YsRUFDWFcsa0JBSHVCQyxLQUFLQyxNQUFNLEtBQU9OLEVBQVFPLFFBQVEsS0FBTSxPQUFPQSxRQUFRLEtBQU0sT0FBUyxNQUFNLFNBQVVDLEVBQUtDLEdBQVMsTUFBZSxLQUFSRCxFQUFhQyxFQUFRQyxtQkFBbUJELEVBQVEsSUFLMUwsQ0NQQUUsT0FBT0MsUUFBUUMsVUFBVUMsYUFBWSxTQUFVQyxFQUFVQyxHQUVyRCxHQURBQyxRQUFRQyxJQUFJSCxRQUNpQixJQUFsQkEsRUFBU0ksTUFDaEIsR0FBc0IseUJBQWxCSixFQUFTSSxPQUFzRCxnQkFBbEJKLEVBQVNJLE9ES2xFLFdBQ0ksTUFDTWhCLEVBRGFYLElBQ1VXLFVBQzdCLElBQUlpQixHQUFrQixFQU10QixPQUxJakIsRUFBVWtCLFFBQVUsR0FDQyxhQUFqQmxCLEVBQVUsSUFBc0MsV0FBakJBLEVBQVUsSUFBb0MsV0FBakJBLEVBQVUsS0FDdEVpQixHQUFrQixHQUduQkEsQ0FDWCxFQ2RnQkUsS0FDQUMsYUFBd0IsVUFBSVIsRUFBU1MsSUFDckNiLE9BQU9jLFFBQVFDLEtBQUtDLElBQUksQ0FBRUMsVUFBV2IsRUFBU1MsTURvQjlELFdBQ0ksTUFBTUssRUFBYXJDLElBQ2JXLEVBQVkwQixFQUFXMUIsVUFDdkJDLEVBQW9CeUIsRUFBV3pCLGtCQUNyQyxJQUFJMEIsR0FBVyxPQUMwQixJQUE5QjFCLEVBQWtCMkIsVUFDUyxRQUE5QjNCLEVBQWtCMkIsV0FDbEIzQixFQUFrQjJCLFNBQVcsUUFDN0JELEdBQVcsUUFHb0IsSUFBNUIxQixFQUFrQjRCLE9BQ08sUUFBNUI1QixFQUFrQjRCLFNBQ2xCNUIsRUFBa0I0QixPQUFTLFFBQzNCRixHQUFXLElBSWYxQixFQUFrQjRCLE9BQVMsUUFDM0JGLEdBQVcsR0FFZixJQUFJRyxFQUFTLElBQUk5QixFQUFVLE1BQU1BLEVBQVUsS0FDdkMrQixFQUFRLEVBQ1osSUFBSyxJQUFJQyxLQUFLL0IsRUFFTjZCLEdBRFMsR0FBVEMsRUFDVSxJQUdBLElBRWRELEdBQVUsR0FBR0UsS0FBSy9CLEVBQWtCK0IsS0FDcENELEdBQVMsRUFFVEosSUFDQXBDLE9BQU9DLFNBQVN5QyxLQUFPSCxFQUUvQixDQ3ZEZ0JJLFNBR0gsR0FBc0IsZUFBbEJ0QixFQUFTSSxNQUF3QixDQUN0QyxNQUFNbUIsRUFBWWpDLEtBQUtrQyxVQUFVeEIsRUFBU3lCLFFBQzFDakIsYUFBMkIsYUFBSWUsRUFDL0IzQixPQUFPYyxRQUFRQyxLQUFLQyxJQUFJLENBQUVjLGFBQWNILEdBQzVDLE1BQ0ssR0FBc0IscUJBQWxCdkIsRUFBU0ksTUFBOEIsQ0FDNUMsSUFBSXVCLEVBQU9DLFNBQVNDLGVBQWUsYUFDbkMsR0FBYSxPQUFURixFQUFlLENBQ2YsSUFBSUcsRUFBVUgsRUFBS0ksYUFBYSxRQUNoQ3ZCLGFBQXdCLFVBQUlzQixFQUM1QmxDLE9BQU9jLFFBQVFDLEtBQUtDLElBQUksQ0FBRW9CLFVBQVdGLEdBQ3pDLENBQ0osS0FDMkIscUJBQWxCOUIsRUFBU0ksT0FDZEYsUUFBUUMsSUFBSSxhQUFjSCxFQUFTaUMsTUFHL0MsRyIsInNvdXJjZXMiOlsid2VicGFjazovL2xsZmV0Y2hlci10cy8uL3NyYy9jb250ZW50X3NjcmlwdHMvZnVuY3Rpb24udHMiLCJ3ZWJwYWNrOi8vbGxmZXRjaGVyLXRzLy4vc3JjL2NvbnRlbnRfc2NyaXB0cy9jb250ZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGV4dHJhY3RVcmwoKSB7XG4gICAgY29uc3QgbFBhdGhBcnJheSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdChcIi9cIikuZmlsdGVyKGl0ZW0gPT4gaXRlbSk7XG4gICAgY29uc3QgbFNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaC5zdWJzdHJpbmcoMSk7XG4gICAgY29uc3QgbFF1ZXJ5U3RyaW5nT2JqZWN0ID0gSlNPTi5wYXJzZSgne1wiJyArIGxTZWFyY2gucmVwbGFjZSgvJi9nLCAnXCIsXCInKS5yZXBsYWNlKC89L2csICdcIjpcIicpICsgJ1wifScsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7IHJldHVybiBrZXkgPT09IFwiXCIgPyB2YWx1ZSA6IGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7IH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhBcnJheTogbFBhdGhBcnJheSxcbiAgICAgICAgcXVlcnlTdHJpbmdPYmplY3Q6IGxRdWVyeVN0cmluZ09iamVjdFxuICAgIH07XG59XG5mdW5jdGlvbiBpc0NvdXJzZVBhZ2UoKSB7XG4gICAgY29uc3QgdXJsRXh0cmFjdCA9IGV4dHJhY3RVcmwoKTtcbiAgICBjb25zdCBwYXRoQXJyYXkgPSB1cmxFeHRyYWN0LnBhdGhBcnJheTtcbiAgICBsZXQgdmFsaWRDb3Vyc2VQYWdlID0gZmFsc2U7XG4gICAgaWYgKHBhdGhBcnJheS5sZW5ndGggPj0gMikge1xuICAgICAgICBpZiAocGF0aEFycmF5WzBdID09PSAnbGVhcm5pbmcnICYmIHBhdGhBcnJheVsxXSAhPT0gJ3RvcGljcycgJiYgcGF0aEFycmF5WzFdICE9PSAnc2VhcmNoJykge1xuICAgICAgICAgICAgdmFsaWRDb3Vyc2VQYWdlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsaWRDb3Vyc2VQYWdlO1xufVxuO1xuZnVuY3Rpb24gZ2V0Q291cnNlU2x1ZygpIHtcbiAgICBjb25zdCB1cmxFeHRyYWN0ID0gZXh0cmFjdFVybCgpO1xuICAgIGNvbnN0IHBhdGhBcnJheSA9IHVybEV4dHJhY3QucGF0aEFycmF5O1xuICAgIHJldHVybiBwYXRoQXJyYXlbMV07XG59XG47XG5mdW5jdGlvbiByZWRpcmVjdE5vQXV0b1BsYXkoKSB7XG4gICAgY29uc3QgdXJsRXh0cmFjdCA9IGV4dHJhY3RVcmwoKTtcbiAgICBjb25zdCBwYXRoQXJyYXkgPSB1cmxFeHRyYWN0LnBhdGhBcnJheTtcbiAgICBjb25zdCBxdWVyeVN0cmluZ09iamVjdCA9IHVybEV4dHJhY3QucXVlcnlTdHJpbmdPYmplY3Q7XG4gICAgbGV0IHJlZGlyZWN0ID0gZmFsc2U7XG4gICAgaWYgKHR5cGVvZiBxdWVyeVN0cmluZ09iamVjdC5hdXRvcGxheSAhPSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAocXVlcnlTdHJpbmdPYmplY3QuYXV0b3BsYXkgPT0gJ3RydWUnKSB7XG4gICAgICAgICAgICBxdWVyeVN0cmluZ09iamVjdC5hdXRvcGxheSA9ICdmYWxzZSc7XG4gICAgICAgICAgICByZWRpcmVjdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBxdWVyeVN0cmluZ09iamVjdC5yZXN1bWUgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHF1ZXJ5U3RyaW5nT2JqZWN0LnJlc3VtZSA9PSAndHJ1ZScpIHtcbiAgICAgICAgICAgIHF1ZXJ5U3RyaW5nT2JqZWN0LnJlc3VtZSA9ICdmYWxzZSc7XG4gICAgICAgICAgICByZWRpcmVjdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHF1ZXJ5U3RyaW5nT2JqZWN0LnJlc3VtZSA9ICdmYWxzZSc7XG4gICAgICAgIHJlZGlyZWN0ID0gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IG5ld1VybCA9IGAvJHtwYXRoQXJyYXlbMF19LyR7cGF0aEFycmF5WzFdfWA7XG4gICAgbGV0IHFzSWR4ID0gMDtcbiAgICBmb3IgKGxldCBrIGluIHF1ZXJ5U3RyaW5nT2JqZWN0KSB7XG4gICAgICAgIGlmIChxc0lkeCA9PSAwKSB7XG4gICAgICAgICAgICBuZXdVcmwgKz0gJz8nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbmV3VXJsICs9ICcmJztcbiAgICAgICAgfVxuICAgICAgICBuZXdVcmwgKz0gYCR7a309JHtxdWVyeVN0cmluZ09iamVjdFtrXX1gO1xuICAgICAgICBxc0lkeCArPSAxO1xuICAgIH1cbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBuZXdVcmw7XG4gICAgfVxufVxuO1xuZnVuY3Rpb24gaXNMb2dlZEluKCkge1xuICAgIHJldHVybiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdsaVtkYXRhLWxpdmUtdGVzdC1tZS1tZW51XScpICE9PSBudWxsO1xufVxuO1xuLy8gY29uc29sZS5sb2coYGlzIGNvdXJzZSBwYWdlIDogJHtpc0NvdXJzZVBhZ2UoKX1gKTtcbmV4cG9ydCB7IGlzQ291cnNlUGFnZSwgcmVkaXJlY3ROb0F1dG9QbGF5IH07XG4iLCJpbXBvcnQgeyBpc0NvdXJzZVBhZ2UsIHJlZGlyZWN0Tm9BdXRvUGxheSB9IGZyb20gJy4vZnVuY3Rpb24nO1xuY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKGZ1bmN0aW9uIChyZXNwb25zZSwgc2VuZFJlc3BvbnNlKSB7XG4gICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICAgIGlmICh0eXBlb2YgcmVzcG9uc2UuZXZlbnQgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHJlc3BvbnNlLmV2ZW50ID09ICdvbkhpc3RvcnlTdGF0ZVVwZGF0ZWQnIHx8IHJlc3BvbnNlLmV2ZW50ID09ICdvblRhYlVwZGF0ZWQnKSB7XG4gICAgICAgICAgICBpZiAoaXNDb3Vyc2VQYWdlKCkpIHtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2VbXCJhY3RpdmVVcmxcIl0gPSByZXNwb25zZS51cmw7XG4gICAgICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2Uuc3luYy5zZXQoeyBhY3RpdmVVcmw6IHJlc3BvbnNlLnVybCB9KTtcbiAgICAgICAgICAgICAgICByZWRpcmVjdE5vQXV0b1BsYXkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyZXNwb25zZS5ldmVudCA9PSAnc2VuZENvb29raWUnKSB7XG4gICAgICAgICAgICBjb25zdCBjb29raWVTdHIgPSBKU09OLnN0cmluZ2lmeShyZXNwb25zZS5jb29raWUpO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlWydhY3RpdmVDb29raWUnXSA9IGNvb2tpZVN0cjtcbiAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHsgYWN0aXZlQ29va2llOiBjb29raWVTdHIgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVzcG9uc2UuZXZlbnQgPT0gJ1NhdmVEYXRhQ29kZXNUb0xTJykge1xuICAgICAgICAgICAgbGV0IG5vZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGF0YUNvZGVzJyk7XG4gICAgICAgICAgICBpZiAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGxldCBkYXRhU3RyID0gbm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEnKTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0b3JhZ2VbXCJkYXRhQ29kZXNcIl0gPSBkYXRhU3RyO1xuICAgICAgICAgICAgICAgIGNocm9tZS5zdG9yYWdlLnN5bmMuc2V0KHsgZGF0YUNvZGVzOiBkYXRhU3RyIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlLmV2ZW50ID09ICdDb250ZW50Q29uc29sZUxvZycpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQb3B1cC5sb2c6JywgcmVzcG9uc2UucGFyYW0pO1xuICAgICAgICB9XG4gICAgfVxufSk7XG4iXSwibmFtZXMiOlsiZXh0cmFjdFVybCIsImxQYXRoQXJyYXkiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwic3BsaXQiLCJmaWx0ZXIiLCJpdGVtIiwibFNlYXJjaCIsInNlYXJjaCIsInN1YnN0cmluZyIsInBhdGhBcnJheSIsInF1ZXJ5U3RyaW5nT2JqZWN0IiwiSlNPTiIsInBhcnNlIiwicmVwbGFjZSIsImtleSIsInZhbHVlIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiY2hyb21lIiwicnVudGltZSIsIm9uTWVzc2FnZSIsImFkZExpc3RlbmVyIiwicmVzcG9uc2UiLCJzZW5kUmVzcG9uc2UiLCJjb25zb2xlIiwibG9nIiwiZXZlbnQiLCJ2YWxpZENvdXJzZVBhZ2UiLCJsZW5ndGgiLCJpc0NvdXJzZVBhZ2UiLCJsb2NhbFN0b3JhZ2UiLCJ1cmwiLCJzdG9yYWdlIiwic3luYyIsInNldCIsImFjdGl2ZVVybCIsInVybEV4dHJhY3QiLCJyZWRpcmVjdCIsImF1dG9wbGF5IiwicmVzdW1lIiwibmV3VXJsIiwicXNJZHgiLCJrIiwiaHJlZiIsInJlZGlyZWN0Tm9BdXRvUGxheSIsImNvb2tpZVN0ciIsInN0cmluZ2lmeSIsImNvb2tpZSIsImFjdGl2ZUNvb2tpZSIsIm5vZGUiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiZGF0YVN0ciIsImdldEF0dHJpYnV0ZSIsImRhdGFDb2RlcyIsInBhcmFtIl0sInNvdXJjZVJvb3QiOiIifQ==