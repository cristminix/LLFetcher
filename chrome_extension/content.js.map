{
  "version": 3,
  "sources": ["../../src/content_scripts/function.ts", "../../src/content_scripts/content.ts"],
  "sourcesContent": ["function extractUrl() {\r\n    const lPathArray = window.location.pathname.split(\"/\").filter(item => item);\r\n    const lSearch = location.search.substring(1);\r\n    const lQueryStringObject = JSON.parse('{\"' + lSearch.replace(/&/g, '\",\"').replace(/=/g,'\":\"') + '\"}', function(key, value) { return key===\"\"?value:decodeURIComponent(value) })\r\n    \r\n    return {\r\n        pathArray : lPathArray,\r\n        queryStringObject : lQueryStringObject\r\n    }\r\n}\r\n\r\nfunction isCoursePage() : boolean {\r\n    const urlExtract = extractUrl();\r\n    const pathArray = urlExtract.pathArray;\r\n    let validCoursePage = false;\r\n    if(pathArray.length >= 2){\r\n        if(pathArray[0] === 'learning' && pathArray[1] !== 'topics' && pathArray[1] !== 'search'){\r\n            validCoursePage = true;\r\n        }\r\n    }\r\n\r\n    return validCoursePage;\r\n};\r\n\r\nfunction getCourseSlug(){\r\n    const urlExtract = extractUrl();\r\n    const pathArray = urlExtract.pathArray;\r\n    return pathArray[1];\r\n};\r\n\r\nfunction redirectNoAutoPlay(){\r\n    const urlExtract = extractUrl();\r\n    const pathArray = urlExtract.pathArray;\r\n    const queryStringObject = urlExtract.queryStringObject;\r\n    let redirect = false;\r\n    if(typeof queryStringObject.autoplay != 'undefined'){\r\n        if(queryStringObject.autoplay == 'true'){\r\n            queryStringObject.autoplay = 'false';\r\n            redirect = true;\r\n        }\r\n    }\r\n    if(typeof queryStringObject.resume != 'undefined'){\r\n        if(queryStringObject.resume == 'true'){\r\n            queryStringObject.resume = 'false';\r\n            redirect = true;\r\n        }\r\n        \r\n    }else{\r\n        queryStringObject.resume = 'false';\r\n        redirect = true;\r\n    }\r\n\r\n    let newUrl = `/${pathArray[0]}/${pathArray[1]}`;\r\n    let qsIdx = 0;\r\n    for(let k in queryStringObject){\r\n        if(qsIdx == 0){\r\n            newUrl += '?';\r\n        }else{\r\n            newUrl += '&'; \r\n        }\r\n        newUrl += `${k}=${queryStringObject[k]}`;\r\n        qsIdx +=1;\r\n    }\r\n    if(redirect){\r\n        window.location.href = newUrl;\r\n    }\r\n};\r\n\r\nfunction isLogedIn(){\r\n    return document.querySelector('li[data-live-test-me-menu]') !== null;\r\n};\r\n\r\n\r\n// console.log(`is course page : ${isCoursePage()}`);\r\n\r\nexport {isCoursePage,redirectNoAutoPlay};", "import {isCoursePage,redirectNoAutoPlay} from './function';\r\n\r\n// const logServer = new LogServer('content');\r\n\r\nchrome.runtime.onMessage.addListener(function (response, sendResponse) {\r\n\t// console.log(response);\r\n\tif(typeof response.event != 'undefined'){\r\n\t\tif(response.event == 'onHistoryStateUpdated' || response.event == 'onTabUpdated'){\r\n            if(isCoursePage()){\r\n                localStorage[\"activeUrl\"] = response.url;\r\n                chrome.storage.sync.set({activeUrl: response.url});\r\n                redirectNoAutoPlay();\r\n            }\r\n\t\t}\r\n        else if(response.event == 'sendCoookie'){\r\n            const cookieStr = JSON.stringify(response.cookie);\r\n            localStorage['activeCookie'] = cookieStr;\r\n\r\n            chrome.storage.sync.set({activeCookie: cookieStr});\r\n\t\t\t\r\n\t\t}\r\n\t\telse if(response.event == 'SaveDataCodesToLS'){\r\n            let node : HTMLElement | null = document.getElementById('dataCodes');\r\n            if(node !== null) {\r\n                let dataStr = node.getAttribute('data');\r\n                // localStorage[\"dataCodes\"] = dataStr;\r\n                chrome.storage.sync.set({dataCodes: dataStr});\r\n                chrome.runtime.sendMessage({cmd:'retrieve_data_codes', dataCodes: dataStr});\r\n\r\n            }\r\n\t\t}\r\n        else if(response.event == 'ContentConsoleLog'){\r\n            console.log('Popup.log:',response.param);\r\n        }\r\n        else if(response.event == 'LogServer'){\r\n            // logServer.log(response.data);\r\n            console.log(response.data);\r\n        }\r\n\t}\r\n});"],
  "mappings": ";AAAA,SAAS,aAAa;AAClB,QAAM,aAAa,OAAO,SAAS,SAAS,MAAM,GAAG,EAAE,OAAO,UAAQ,IAAI;AAC1E,QAAM,UAAU,SAAS,OAAO,UAAU,CAAC;AAC3C,QAAM,qBAAqB,KAAK,MAAM,OAAO,QAAQ,QAAQ,MAAM,KAAK,EAAE,QAAQ,MAAK,KAAK,IAAI,MAAM,SAAS,KAAK,OAAO;AAAE,WAAO,QAAM,KAAG,QAAM,mBAAmB,KAAK;AAAA,EAAE,CAAC;AAE9K,SAAO;AAAA,IACH,WAAY;AAAA,IACZ,mBAAoB;AAAA,EACxB;AACJ;AAEA,SAAS,eAAyB;AAC9B,QAAM,aAAa,WAAW;AAC9B,QAAM,YAAY,WAAW;AAC7B,MAAI,kBAAkB;AACtB,MAAG,UAAU,UAAU,GAAE;AACrB,QAAG,UAAU,OAAO,cAAc,UAAU,OAAO,YAAY,UAAU,OAAO,UAAS;AACrF,wBAAkB;AAAA,IACtB;AAAA,EACJ;AAEA,SAAO;AACX;AAQA,SAAS,qBAAoB;AACzB,QAAM,aAAa,WAAW;AAC9B,QAAM,YAAY,WAAW;AAC7B,QAAM,oBAAoB,WAAW;AACrC,MAAI,WAAW;AACf,MAAG,OAAO,kBAAkB,YAAY,aAAY;AAChD,QAAG,kBAAkB,YAAY,QAAO;AACpC,wBAAkB,WAAW;AAC7B,iBAAW;AAAA,IACf;AAAA,EACJ;AACA,MAAG,OAAO,kBAAkB,UAAU,aAAY;AAC9C,QAAG,kBAAkB,UAAU,QAAO;AAClC,wBAAkB,SAAS;AAC3B,iBAAW;AAAA,IACf;AAAA,EAEJ,OAAK;AACD,sBAAkB,SAAS;AAC3B,eAAW;AAAA,EACf;AAEA,MAAI,SAAS,IAAI,UAAU,MAAM,UAAU;AAC3C,MAAI,QAAQ;AACZ,WAAQ,KAAK,mBAAkB;AAC3B,QAAG,SAAS,GAAE;AACV,gBAAU;AAAA,IACd,OAAK;AACD,gBAAU;AAAA,IACd;AACA,cAAU,GAAG,KAAK,kBAAkB;AACpC,aAAQ;AAAA,EACZ;AACA,MAAG,UAAS;AACR,WAAO,SAAS,OAAO;AAAA,EAC3B;AACJ;;;AC9DA,OAAO,QAAQ,UAAU,YAAY,SAAU,UAAU,cAAc;AAEtE,MAAG,OAAO,SAAS,SAAS,aAAY;AACvC,QAAG,SAAS,SAAS,2BAA2B,SAAS,SAAS,gBAAe;AACvE,UAAG,aAAa,GAAE;AACd,qBAAa,eAAe,SAAS;AACrC,eAAO,QAAQ,KAAK,IAAI,EAAC,WAAW,SAAS,IAAG,CAAC;AACjD,2BAAmB;AAAA,MACvB;AAAA,IACV,WACc,SAAS,SAAS,eAAc;AACpC,YAAM,YAAY,KAAK,UAAU,SAAS,MAAM;AAChD,mBAAa,kBAAkB;AAE/B,aAAO,QAAQ,KAAK,IAAI,EAAC,cAAc,UAAS,CAAC;AAAA,IAE3D,WACQ,SAAS,SAAS,qBAAoB;AACpC,UAAI,OAA4B,SAAS,eAAe,WAAW;AACnE,UAAG,SAAS,MAAM;AACd,YAAI,UAAU,KAAK,aAAa,MAAM;AAEtC,eAAO,QAAQ,KAAK,IAAI,EAAC,WAAW,QAAO,CAAC;AAC5C,eAAO,QAAQ,YAAY,EAAC,KAAI,uBAAuB,WAAW,QAAO,CAAC;AAAA,MAE9E;AAAA,IACV,WACc,SAAS,SAAS,qBAAoB;AAC1C,cAAQ,IAAI,cAAa,SAAS,KAAK;AAAA,IAC3C,WACQ,SAAS,SAAS,aAAY;AAElC,cAAQ,IAAI,SAAS,IAAI;AAAA,IAC7B;AAAA,EACP;AACD,CAAC;",
  "names": []
}
