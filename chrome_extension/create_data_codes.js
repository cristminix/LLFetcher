(()=>{function t(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,r){var e=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=e){var n,o,i,a,u=[],l=!0,c=!1;try{if(i=(e=e.call(t)).next,0===r){if(Object(e)!==e)return;l=!1}else for(;!(l=(n=i.call(e)).done)&&(u.push(n.value),u.length!==r);l=!0);}catch(t){c=!0,o=t}finally{try{if(!l&&null!=e.return&&(a=e.return(),Object(a)!==a))return}finally{if(c)throw o}}return u}}(t,e)||function(t,e){if(t){if("string"==typeof t)return r(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function r(t,r){(null==r||r>t.length)&&(r=t.length);for(var e=0,n=new Array(r);e<r;e++)n[e]=t[e];return n}function e(){try{return Ember.Namespace.NAMESPACES.find((function(t){return t instanceof Ember.Application})).__container__.lookup("route:course/video").store._globalM3RecordDataCache}catch(t){}return null}var n=function(t,r){var e=[];for(var n in r)void 0!==r[n]._data.$type&&r[n]._data.$type==t&&e.push([n,r[n]._data]);return e};function o(){var r=e();if(null===r)return null;var o=n("com.linkedin.learning.api.deco.content.Course",r),i={title:"",slug:"",duration:0,sourceCodeRepository:"",subtitle:"",description:"",urn:"",authors:[]};if(o.length>0){var a=t(o[0],2),u=a[0],l=a[1];i.title=l.title,i.duration=l.duration.duration,i.sourceCodeRepository=l.sourceCodeRepository,i.subtitle=l.subtitle,i.slug=l.slug,i.urn=u;try{i.description=l.descriptionV2.text}catch(t){}}for(var c in o=n("com.linkedin.learning.api.deco.content.Author",r)){var s=t(o[c],2),d=s[0],f=s[1],y={biography:f.biographyV2.text,shortBiography:f.shortBiographyV2.text,slug:f.slug,urn:d};i.authors.push(y)}return i}function i(){var t=e(),r=function(t,r){var e=new RegExp("^urn:li:learningApiCourse:","g");for(var n in r)if(n.match(e))return r[n];return null}(0,t).__data.contents,n=[];for(var o in r){var i={items:[]},a=t[r[o]["*section"]].__data;for(var u in i.title=a.title,a["*items"]){var l=a["*items"][u];try{var c=t[t[l].__data.content.video].__data,s={duration:c.duration.duration,slug:t[c.entityUrn].__data.slug,title:c.title};i.items.push(s)}catch(t){console.log(t)}}n.push(i)}return n}window.onload=function(){try{!function(){var t={course:o(),sections:i()};console.log(t);var r=document.createElement("code");r.id="dataCodes",r.setAttribute("data",JSON.stringify(t)),document.getElementsByTagName("body")[0].appendChild(r)}()}catch(t){console.log(t)}var t="<h1>@replaced</h1>";try{document.querySelector(".linkedin-logo").innerHTML=t}catch(t){console.log(t)}try{document.getElementById("replacedContent").innerHTML=t}catch(t){console.log(t)}}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,