const m=async(o,e)=>new Promise((r,t)=>{if(o==null)return t();var c=0,a=o.transaction([e]).objectStore(e).openCursor();a.onsuccess=(function(n){var s=n.target.result;s?(s.value,c+=1,s.continue()):r(c)}).bind(void 0),a.onerror=function(n){t("error in "+e+": "+n)}}),C=async(o,e)=>new Promise((r,t)=>{if(o==null)return t();var c=0,a=o.transaction([e]).objectStore(e).openCursor();a.onsuccess=(function(n){var s=n.target.result;if(s){var u=s.value,f=JSON.stringify(u);c+=f.length,s.continue()}else r(c)}).bind(void 0),a.onerror=function(n){t("error in "+e+": "+n)}});let i=null;async function g(o){if(i){const e=i.transaction("csidb","readwrite"),r=e.objectStore("csidb");return new Promise((t,c)=>{e.oncomplete=function(){t(!0)},e.onerror=function(){t(!1)},o.forEach(a=>{let n=r.add(a);n.onsuccess=function(){}})})}}async function l(o){if(i){const e=i.transaction("csidb","readonly"),r=e.objectStore("csidb");return new Promise((t,c)=>{e.oncomplete=function(){},e.onerror=function(){};let a=r.get(o);a.onsuccess=function(n){t(n.target.result)}})}}async function x(o){if(i){const e=i.transaction("csidb","readwrite"),r=e.objectStore("csidb");return new Promise((t,c)=>{e.oncomplete=function(){t(!0)},e.onerror=function(){t(!1)},r.put(o)})}}h();async function h(){const o=indexedDB.open("main");o.onerror=function(e){console.log("Problem opening DB.")},o.onupgradeneeded=function(e){i=e.target.result;let r=i.createObjectStore("prxCache",{keyPath:"key"});r=i.createObjectStore("csidb",{keyPath:"dbName"}),r.transaction.oncomplete=function(t){console.log("ObjectStore Created.")}},o.onsuccess=function(e){i=e.target.result,i.onerror=function(r){}}}async function j(o){if(i){const e=i.transaction("prxCache","readwrite"),r=e.objectStore("prxCache");return new Promise((t,c)=>{e.oncomplete=function(){t(!0)},e.onerror=function(){t(!1)},o.forEach(a=>{let n=r.add(a);n.onsuccess=function(){}})})}}async function d(o){if(i){const e=i.transaction("prxCache","readonly"),r=e.objectStore("prxCache");return new Promise((t,c)=>{e.oncomplete=function(){},e.onerror=function(){};let a=r.get(o);a.onsuccess=function(n){t(n.target.result)}})}}async function p(o){if(i){const e=i.transaction("prxCache","readwrite"),r=e.objectStore("prxCache");return new Promise((t,c)=>{e.oncomplete=function(){t(!0)},e.onerror=function(){t(!1)},r.put(o)})}}async function b(o,e=!1){if(i){const r=i.transaction("prxCache","readwrite"),t=r.objectStore("prxCache");return new Promise((c,a)=>{r.oncomplete=function(){c(!0)},r.onerror=function(){c(!1)},e?t.clear():t.delete(o)})}}chrome.runtime.onMessage.addListener((o,e,r)=>{const{name:t,data:c,key:a}=o;if(t==="csidb.select")l(c.dbName).then(n=>{r(n)});else if(t==="csidb.commit"){if(c.records){const{records:n}=c,s=n[0];l(s.dbName).then(u=>{u?(console.log(`Update csidb existing rec:${u.dbName}`),x(s)):(console.log(`insert csidb:${s.dbName}`),g(n))})}}else if(t==="prxCache.clear")b(null,!0).then(n=>{r(n)});else if(t==="prxCache.count")m(i,"prxCache").then(n=>{r(n)});else if(t==="prxCache.size")C(i,"prxCache").then(n=>{r(n)});else if(t==="prxCache.get")d(c.key).then(n=>{r(n)});else if(t==="prxCache.create")h();else if(t==="prxCache.update"){if(c.records){const{records:n}=c;p(n[0])}}else if(t==="prxCache.insert"){if(c.records){const{records:n}=c,s=n[0];d(s.key).then(u=>{u?(console.log(`Update existing rec:${u.key}`),p(s)):(console.log(`insert prxCache:${s.key}`),j(n))})}}else if(t==="prxCache.delete")c.key&&b(c.key);else if(o.action==="activateTab"){const{url:n,optionPageBaseUrl:s}=o;chrome.tabs.query({url:`${chrome.runtime.getURL(`${s}options.html`)}*`},function(u){var f=u[0];chrome.tabs.update(f.id,{active:!0}),chrome.tabs.update(f.id,{url:n})})}return!0});
