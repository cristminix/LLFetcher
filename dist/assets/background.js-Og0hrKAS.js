const h=async(r,e)=>new Promise((o,t)=>{if(r==null)return t();var c=0,a=r.transaction([e]).objectStore(e).openCursor();a.onsuccess=(function(n){var i=n.target.result;i?(i.value,c+=1,i.continue()):o(c)}).bind(void 0),a.onerror=function(n){t("error in "+e+": "+n)}}),m=async(r,e)=>new Promise((o,t)=>{if(r==null)return t();var c=0,a=r.transaction([e]).objectStore(e).openCursor();a.onsuccess=(function(n){var i=n.target.result;if(i){var u=i.value,f=JSON.stringify(u);c+=f.length,i.continue()}else o(c)}).bind(void 0),a.onerror=function(n){t("error in "+e+": "+n)}});let s=null;async function C(r){if(s){const e=s.transaction("csidb","readwrite"),o=e.objectStore("csidb");return new Promise((t,c)=>{e.oncomplete=function(){t(!0)},e.onerror=function(){t(!1)},r.forEach(a=>{let n=o.add(a);n.onsuccess=function(){}})})}}async function l(r){if(s){const e=s.transaction("csidb","readonly"),o=e.objectStore("csidb");return new Promise((t,c)=>{e.oncomplete=function(){},e.onerror=function(){};let a=o.get(r);a.onsuccess=function(n){t(n.target.result)}})}}async function g(r){if(s){const e=s.transaction("csidb","readwrite"),o=e.objectStore("csidb");return new Promise((t,c)=>{e.oncomplete=function(){t(!0)},e.onerror=function(){t(!1)},o.put(r)})}}b();async function b(){const r=indexedDB.open("main");r.onerror=function(e){console.log("Problem opening DB.")},r.onupgradeneeded=function(e){s=e.target.result;let o=s.createObjectStore("prxCache",{keyPath:"key"});o=s.createObjectStore("csidb",{keyPath:"dbName"}),o.transaction.oncomplete=function(t){console.log("ObjectStore Created.")}},r.onsuccess=function(e){s=e.target.result,s.onerror=function(o){}}}async function x(r){if(s){const e=s.transaction("prxCache","readwrite"),o=e.objectStore("prxCache");return new Promise((t,c)=>{e.oncomplete=function(){t(!0)},e.onerror=function(){t(!1)},r.forEach(a=>{let n=o.add(a);n.onsuccess=function(){}})})}}async function d(r){if(s){const e=s.transaction("prxCache","readonly"),o=e.objectStore("prxCache");return new Promise((t,c)=>{e.oncomplete=function(){},e.onerror=function(){};let a=o.get(r);a.onsuccess=function(n){t(n.target.result)}})}}async function p(r){if(s){const e=s.transaction("prxCache","readwrite"),o=e.objectStore("prxCache");return new Promise((t,c)=>{e.oncomplete=function(){t(!0)},e.onerror=function(){t(!1)},o.put(r)})}}async function j(r){if(s){const e=s.transaction("prxCache","readwrite"),o=e.objectStore("prxCache");return new Promise((t,c)=>{e.oncomplete=function(){t(!0)},e.onerror=function(){t(!1)},o.delete(r)})}}chrome.runtime.onMessage.addListener((r,e,o)=>{const{name:t,data:c,key:a}=r;if(t==="csidb.select")l(c.dbName).then(n=>{o(n)});else if(t==="csidb.commit"){if(c.records){const{records:n}=c,i=n[0];l(i.dbName).then(u=>{u?(console.log(`Update csidb existing rec:${u.dbName}`),g(i)):(console.log(`insert csidb:${i.dbName}`),C(n))})}}else if(t!=="prxCache.clear"){if(t==="prxCache.count")h(s,"prxCache").then(n=>{o(n)});else if(t==="prxCache.size")m(s,"prxCache").then(n=>{o(n)});else if(t==="prxCache.get")d(c.key).then(n=>{o(n)});else if(t==="prxCache.create")b();else if(t==="prxCache.update"){if(c.records){const{records:n}=c;p(n[0])}}else if(t==="prxCache.insert"){if(c.records){const{records:n}=c,i=n[0];d(i.key).then(u=>{u?(console.log(`Update existing rec:${u.key}`),p(i)):(console.log(`insert prxCache:${i.key}`),x(n))})}}else if(t==="prxCache.delete")c.key&&j(c.key);else if(r.action==="activateTab"){const{url:n,optionPageBaseUrl:i}=r;chrome.tabs.query({url:`${chrome.runtime.getURL(`${i}options.html`)}*`},function(u){var f=u[0];chrome.tabs.update(f.id,{active:!0}),chrome.tabs.update(f.id,{url:n})})}}return!0});
