import{i as g,a as h,b as p,c as w,d as _}from"./fn-FSIKaUxd.js";const L=async(e,t)=>new Promise((s,o)=>{if(e==null)return o();var c=0,l=e.transaction([t]).objectStore(t).openCursor();l.onsuccess=(function(n){var a=n.target.result;a?(a.value,c+=1,a.continue()):s(c)}).bind(void 0),l.onerror=function(n){o("error in "+t+": "+n)}}),M=async(e,t)=>new Promise((s,o)=>{if(e==null)return o();var c=0,l=e.transaction([t]).objectStore(t).openCursor();l.onsuccess=(function(n){var a=n.target.result;if(a){var i=a.value,d=JSON.stringify(i);c+=d.length,a.continue()}else s(c)}).bind(void 0),l.onerror=function(n){o("error in "+t+": "+n)}}),f={};let u=null;const y="com.cristminix.llfetcher";function T(e){if(typeof e>"u"){console.warn("Must pass a tabId to changeToActiveIcon");return}chrome.action.setIcon({path:{19:"/extension/images/v-pink-19.png",38:"/extension/images/v-pink-38.png"},tabId:e})}function $(e){if(typeof e>"u"){console.warn("Must pass a tabId to changeToInactiveIcon");return}chrome.action.setIcon({path:{19:"/logo/disabled/icon-19.png",38:"/logo/disabled/icon-38.png"},tabId:e})}function P(e){if(typeof e>"u"){console.warn("Must pass a tabId to stopListening");return}delete f[e],$(e),console.log("Will stop automatically reloading tab",e)}function m(e){if(typeof e>"u"){console.warn("Must pass a tabId to startListening");return}f[e]=e,T(e),console.log("Will start reloading tab",e,"on relevant Vim events.")}try{chrome.action.onClicked.addListener(function(e){const t=e.id;f[t]?P(t):m(t)})}catch(e){console.log(e)}chrome.tabs.onUpdated.addListener(function(e,t,s){t.status==="loading"&&f[e]&&m(e)});async function U(e,t){return new Promise((s,o)=>{const c=l=>{s(l),t(l),u.onMessage.removeListener(c)};try{u.onMessage.addListener(c),u.postMessage(e)}catch(l){o(l)}})}function N(e){switch(console.log("Event page got native message from host:",e),e){case"reload":Object.keys(f).forEach(function(t){t=parseInt(t),console.log("Found listening tab id",t),chrome.tabs.reload(t,null,function(){console.log("Reloading tab id",t),f[t]&&m(t)})});break}}function z(){console.error("Failed to connect. "+chrome.runtime.lastError.message)}function A(){u=chrome.runtime.connectNative(y),u.onMessage.addListener(N),u.onDisconnect.addListener(z),console.log("Event page connecting to native messaging host ",y)}let r=null;const E=async e=>await p("csidb",e,r),b=async e=>await g("csidb",e,r),S=async e=>await h("csidb",e,r),D=async e=>await p("prxCache",e,r),v=async e=>await g("prxCache",e,r),k=async e=>await h("prxCache",e,r),C=async(e,t=!1)=>await w("prxCache",e,t,r),x=async()=>{r=await _([{name:"prxCache",keyPath:"key"},{name:"csidb",keyPath:"dbName"},{name:"userdata",keyPath:"key"}])};chrome.runtime.onMessage.addListener((e,t,s)=>{const{name:o,data:c,key:l}=e;if(o.match(/^nm\./)){const n=o.replace(/^nm\./,"");U({cmd:n,data:c},a=>{s(a)})}else if(o==="content.cookie.set"){const n="uCookies";chrome.cookies.getAll({domain:"www.linkedin.com"}).then(a=>{const i={key:n,content:a};g("userdata",i.key,r).then(d=>{d?(console.log(`Update existing userdata rec:${d.key}`),h("userdata",i,r)):(console.log(`insert userdata:${i.key}`),p("userdata",i,r))})}),s(e)}else if(o==="csidb.select")b(c.dbName).then(n=>{s(n)});else if(o==="csidb.commit"){if(c.records){const{records:n}=c,a=n[0];b(a.dbName).then(i=>{i?(console.log(`Update csidb existing rec:${i.dbName}`),S(a)):(console.log(`insert csidb:${a.dbName}`),E(n))})}}else if(o==="prxCache.clear")C(null,!0).then(n=>{s(n)});else if(o==="prxCache.count")L(r,"prxCache").then(n=>{s(n)});else if(o==="prxCache.size")M(r,"prxCache").then(n=>{s(n)});else if(o==="prxCache.get")v(c.key).then(n=>{s(n)});else if(o==="prxCache.create")x();else if(o==="prxCache.update"){if(c.records){const{records:n}=c;k(n[0])}}else if(o==="prxCache.insert"){if(c.records){const{records:n}=c,a=n[0];v(a.key).then(i=>{i?(console.log(`Update existing rec:${i.key}`),k(a)):(console.log(`insert prxCache:${a.key}`),D(n))})}}else if(o==="prxCache.delete")c.key&&C(c.key);else if(e.action==="activateTab"){const{url:n,optionPageBaseUrl:a}=e;chrome.tabs.query({url:`${chrome.runtime.getURL(`${a}options.html`)}*`},function(i){var d=i[0];chrome.tabs.update(d.id,{active:!0}),chrome.tabs.update(d.id,{url:n})})}return!0});x();A();
