{
  "version": 3,
  "sources": ["../src/content_scripts/function.ts", "../src/content_scripts/content.ts"],
  "sourcesContent": ["function extractUrl() {\r\n    const lPathArray = window.location.pathname.split(\"/\").filter(item => item);\r\n    const lSearch = location.search.substring(1);\r\n    const lQueryStringObject = JSON.parse('{\"' + lSearch.replace(/&/g, '\",\"').replace(/=/g,'\":\"') + '\"}', function(key, value) { return key===\"\"?value:decodeURIComponent(value) })\r\n    \r\n    return {\r\n        pathArray : lPathArray,\r\n        queryStringObject : lQueryStringObject\r\n    }\r\n}\r\n\r\nfunction isCoursePage() : boolean {\r\n    const urlExtract = extractUrl();\r\n    const pathArray = urlExtract.pathArray;\r\n    let validCoursePage = false;\r\n    if(pathArray.length >= 2){\r\n        if(pathArray[0] === 'learning' && pathArray[1] !== 'topics' && pathArray[1] !== 'search'){\r\n            validCoursePage = true;\r\n        }\r\n    }\r\n\r\n    return validCoursePage;\r\n};\r\n\r\nfunction getCourseSlug(){\r\n    const urlExtract = extractUrl();\r\n    const pathArray = urlExtract.pathArray;\r\n    return pathArray[1];\r\n};\r\n\r\nfunction redirectNoAutoPlay(){\r\n    const urlExtract = extractUrl();\r\n    const pathArray = urlExtract.pathArray;\r\n    const queryStringObject = urlExtract.queryStringObject;\r\n    let redirect = false;\r\n    if(typeof queryStringObject.autoplay != 'undefined'){\r\n        if(queryStringObject.autoplay == 'true'){\r\n            queryStringObject.autoplay = 'false';\r\n            redirect = true;\r\n        }\r\n    }\r\n    if(typeof queryStringObject.resume != 'undefined'){\r\n        if(queryStringObject.resume == 'true'){\r\n            queryStringObject.resume = 'false';\r\n            redirect = true;\r\n        }\r\n        \r\n    }else{\r\n        queryStringObject.resume = 'false';\r\n        redirect = true;\r\n    }\r\n\r\n    let newUrl = `/${pathArray[0]}/${pathArray[1]}`;\r\n    let qsIdx = 0;\r\n    for(let k in queryStringObject){\r\n        if(qsIdx == 0){\r\n            newUrl += '?';\r\n        }else{\r\n            newUrl += '&'; \r\n        }\r\n        newUrl += `${k}=${queryStringObject[k]}`;\r\n        qsIdx +=1;\r\n    }\r\n    if(redirect){\r\n        window.location.href = newUrl;\r\n    }\r\n};\r\n\r\nfunction isLogedIn(){\r\n    return document.querySelector('li[data-live-test-me-menu]') !== null;\r\n};\r\n\r\n\r\n// console.log(`is course page : ${isCoursePage()}`);\r\n\r\nexport {isCoursePage,redirectNoAutoPlay};", "import {isCoursePage,redirectNoAutoPlay} from './function';\r\n\r\nchrome.runtime.onMessage.addListener(function (response, sendResponse) {\r\n\tconsole.log(response);\r\n\tif(typeof response.event != 'undefined'){\r\n\t\tif(response.event == 'onHistoryStateUpdated' || response.event == 'onTabUpdated'){\r\n            if(isCoursePage()){\r\n                localStorage[\"activeUrl\"] = response.url;\r\n                chrome.storage.sync.set({activeUrl: response.url});\r\n                redirectNoAutoPlay();\r\n            }\r\n\t\t}\r\n        else if(response.event == 'sendCoookie'){\r\n            const cookieStr = JSON.stringify(response.cookie);\r\n            localStorage['activeCookie'] = cookieStr;\r\n\r\n            chrome.storage.sync.set({activeCookie: cookieStr});\r\n\t\t\t\r\n\t\t}\r\n\t\telse if(response.event == 'SaveDataCodesToLS'){\r\n            let node : HTMLElement | null = document.getElementById('dataCodes');\r\n            if(node !== null) {\r\n                let dataStr = node.getAttribute('data');\r\n                localStorage[\"dataCodes\"] = dataStr;\r\n                chrome.storage.sync.set({dataCodes: dataStr});\r\n            }\r\n            chrome.runtime.sendMessage({cmd:'retrieve_data_codes', dataCodes: dataStr});\r\n\t\t}\r\n        else if(response.event == 'ContentConsoleLog'){\r\n            console.log('Popup.log:',response.param);\r\n        }\r\n\t}\r\n});"],
  "mappings": "mBAAA,SAASA,GAAa,CAClB,IAAMC,EAAa,OAAO,SAAS,SAAS,MAAM,GAAG,EAAE,OAAOC,GAAQA,CAAI,EACpEC,EAAU,SAAS,OAAO,UAAU,CAAC,EACrCC,EAAqB,KAAK,MAAM,KAAOD,EAAQ,QAAQ,KAAM,KAAK,EAAE,QAAQ,KAAK,KAAK,EAAI,KAAM,SAASE,EAAKC,EAAO,CAAE,OAAOD,IAAM,GAAGC,EAAM,mBAAmBA,CAAK,CAAE,CAAC,EAE9K,MAAO,CACH,UAAYL,EACZ,kBAAoBG,CACxB,CACJ,CAEA,SAASG,GAAyB,CAE9B,IAAMC,EADaR,EAAW,EACD,UACzBS,EAAkB,GACtB,OAAGD,EAAU,QAAU,GAChBA,EAAU,KAAO,YAAcA,EAAU,KAAO,UAAYA,EAAU,KAAO,WAC5EC,EAAkB,IAInBA,CACX,CAQA,SAASC,GAAoB,CACzB,IAAMC,EAAaC,EAAW,EACxBC,EAAYF,EAAW,UACvBG,EAAoBH,EAAW,kBACjCI,EAAW,GACZ,OAAOD,EAAkB,SAAY,KACjCA,EAAkB,UAAY,SAC7BA,EAAkB,SAAW,QAC7BC,EAAW,IAGhB,OAAOD,EAAkB,OAAU,IAC/BA,EAAkB,QAAU,SAC3BA,EAAkB,OAAS,QAC3BC,EAAW,KAIfD,EAAkB,OAAS,QAC3BC,EAAW,IAGf,IAAIC,EAAS,IAAIH,EAAU,MAAMA,EAAU,KACvCI,EAAQ,EACZ,QAAQC,KAAKJ,EACNG,GAAS,EACRD,GAAU,IAEVA,GAAU,IAEdA,GAAU,GAAGE,KAAKJ,EAAkBI,KACpCD,GAAQ,EAETF,IACC,OAAO,SAAS,KAAOC,EAE/B,CChEA,OAAO,QAAQ,UAAU,YAAY,SAAUG,EAAUC,EAAc,CAEtE,GADA,QAAQ,IAAID,CAAQ,EACjB,OAAOA,EAAS,MAAS,IAC3B,GAAGA,EAAS,OAAS,yBAA2BA,EAAS,OAAS,eACrDE,EAAa,IACZ,aAAa,UAAeF,EAAS,IACrC,OAAO,QAAQ,KAAK,IAAI,CAAC,UAAWA,EAAS,GAAG,CAAC,EACjDG,EAAmB,WAGnBH,EAAS,OAAS,cAAc,CACpC,IAAMI,EAAY,KAAK,UAAUJ,EAAS,MAAM,EAChD,aAAa,aAAkBI,EAE/B,OAAO,QAAQ,KAAK,IAAI,CAAC,aAAcA,CAAS,CAAC,CAE3D,SACQJ,EAAS,OAAS,oBAAoB,CACpC,IAAIK,EAA4B,SAAS,eAAe,WAAW,EACnE,GAAGA,IAAS,KAAM,CACd,IAAIC,EAAUD,EAAK,aAAa,MAAM,EACtC,aAAa,UAAeC,EAC5B,OAAO,QAAQ,KAAK,IAAI,CAAC,UAAWA,CAAO,CAAC,CAChD,CACA,OAAO,QAAQ,YAAY,CAAC,IAAI,sBAAuB,UAAW,OAAO,CAAC,CACpF,MACcN,EAAS,OAAS,qBACtB,QAAQ,IAAI,aAAaA,EAAS,KAAK,CAGnD,CAAC",
  "names": ["extractUrl", "lPathArray", "item", "lSearch", "lQueryStringObject", "key", "value", "isCoursePage", "pathArray", "validCoursePage", "redirectNoAutoPlay", "urlExtract", "extractUrl", "pathArray", "queryStringObject", "redirect", "newUrl", "qsIdx", "k", "response", "sendResponse", "isCoursePage", "redirectNoAutoPlay", "cookieStr", "node", "dataStr"]
}
