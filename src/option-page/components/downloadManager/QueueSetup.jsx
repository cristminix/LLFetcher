import { useEffect, useState } from "react"
import { fetchCourseTocMeta } from "../learning_fn"
import Button from "../Button"
import DropdownSelect from "../DropdownSelect"
import FmtSelector from "./queue-setup/FmtSelector"
import CourseApi from "../../../course-api/CourseApi"

const btnCls = "py-2 px-2 inline-flex justify-center items-center gap-2 -mt-px -ml-px first:rounded-t-lg last:rounded-b-lg sm:first:rounded-l-lg sm:mt-0 sm:first:ml-0 sm:first:rounded-tr-none sm:last:rounded-bl-none sm:last:rounded-r-lg border font-medium bg-white text-gray-700 align-middle hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-2 focus:ring-blue-600 transition-all text-sm dark:bg-gray-800 dark:hover:bg-slate-800 dark:border-gray-700 dark:text-gray-400"
const lblCls = "mr-1 mt-1 font-medium  text-sm dark:bg-slate-900 dark:text-gray-400 "    


const QueueSetup = ({
    logStatusBar,clearStatusBar,
    availableFmt, setAvailableFmt,
    availableTrans, setAvailableTrans,
    selectedFmt, setSelectedFmt,
    selectedTrans, setSelectedTrans,
    selectFmt,selectTrans,
    dmsetup,setDmsetup, store,course,sections,tocs, alreadySetup,setAlreadySetup, displaySetupUi, reconfigureSetup = false, setReconfigureSetup, runSetup, setRunSetup}) => {
  

    const [loadingFetchToc, setLoadingFetchToc] = useState(false) 
    const mDMSetup = store.get("DMSetup")
    
    /*
    const fetchToc = async(courseSlug,tocSlug)=> {
		
		const [validResource, tocUp, exFile, streamLocations,errorMsg] = await fetchCourseTocMeta(courseSlug,tocSlug)
        let availableFmtList = []

		if(validResource){
            availableFmtList = streamLocations.map(item => item.fmt)
		}else{
            if(errorMsg == "ERR_NO_LOGIN"){
                alert("You must login to linkedin learning website")
            }
        }
		return [validResource, availableFmtList,exFile]
		
	}

    const getAvailableFmtOld = async(e) => {
        if(dmsetup){
            const savedFmtList = dmsetup.availableFmt
            setAvailableFmt(savedFmtList)
            return
        }
        const tocKeys = Object.keys(tocs)
        const sectionSlug = tocKeys[0]
        const tocList = tocs[sectionSlug]
        const tocSlug = tocList[0].slug
        console.log(tocSlug)
        setLoadingFetchToc(true)
        setAvailableFmt([])

        const [validResource, availableFmtList,exerciseFile] = await fetchToc(course.slug, tocSlug)
        if(validResource){
            setAvailableFmt(availableFmtList)
            console.log(exerciseFile)
            await mDMSetup.create(course.id,availableFmtList,"",course.sourceCodeRepository,exerciseFile,1, false)
        }
        setLoadingFetchToc(false)

    }
    */
    const getAvailableFmt = async(e) => {
        if(dmsetup){
            const {availableFmt,availableTrans} = dmsetup
            setAvailableFmt(availableFmt)
            setAvailableTrans(availableTrans)
            return
        }
        setLoadingFetchToc(true)
        setAvailableFmt([])
        setAvailableTrans([])

        const courseApi = new CourseApi(store)
        const ncourse = await courseApi.getCourseInfo(course.slug)
        const ntocs = await courseApi.getCourseTocs(course.slug)
        
        

        let getFirstTocPassed = false
        let toc,tocSlug

        if(ntocs){
            const tocKeys = Object.keys(ntocs)
            if(tocKeys.length > 0){
                const sectionSlug = tocKeys.shift()
                const tocList = ntocs[sectionSlug]
                if(tocList.length > 0){
                    toc = tocList.shift()
                    tocSlug = toc.slug
                    if(toc){
                        getFirstTocPassed = true
                    }
                }
                

            }else{
                console.error(`tocKeys is empty`)
            }
        }
        
        if(getFirstTocPassed){
            console.log(tocSlug)
            const streamLocations = await courseApi.getStreamLocs(toc)
            let availableFmtList = streamLocations.filter(item=>item !== null).map(row=>row.fmt)
            console.log(streamLocations)
            console.log(availableFmtList)
            const transcripts = await courseApi.getTranscripts(toc)
            const mPrxCache  = store.get('PrxCache')
            await mPrxCache.unset(toc.url)
            const availableTransList = Object.keys(transcripts).map(value=>{
                const autogen = transcripts[value].autoGenerated? " - Auto Generated" : ""
                const text =`${transcripts[value].lang.toUpperCase()} ${autogen}`
                return {
                    value,
                    text
                }
            })
            console.log(transcripts)
            console.log(availableTransList)
            const exerciseFile = ncourse.exerciseFiles
            console.log(exerciseFile)

            // const selectedFmt = null
            // const selectedTrans = null
            const sourceRepo = ncourse.sourceCodeRepository
            const status = 1
            const finished = false
            
            setAvailableFmt(availableFmtList)
            setAvailableTrans(availableTransList)

            const dmsetup = await mDMSetup.create(ncourse.id,availableFmtList,selectedFmt,availableTransList,selectedTrans,sourceRepo,exerciseFile,status,finished)
            setDmsetup(dmsetup)
        }else{
            alert(`Operation Canceled : Could not get first TOC in first Course Section`)
        }

        setLoadingFetchToc(false)
        return
        /*
        const tocKeys = Object.keys(tocs)
        const sectionSlug = tocKeys[0]
        const tocList = tocs[sectionSlug]
        const tocSlug = tocList[0].slug
        console.log(tocSlug)
        setLoadingFetchToc(true)
        setAvailableFmt([])

        const [validResource, availableFmtList,exerciseFile] = await fetchToc(course.slug, tocSlug)
        if(validResource){
            setAvailableFmt(availableFmtList)
            console.log(availableFmtList,exerciseFile)
            / *
            availableFmtList = ['360', '720', '540', '480'] 
            availableTransList = ['us', 'id', 'de', 'it'] 
            exerciseFile = {
                name: "Ex_Files_Intro_to_Web_APIs.zip"
                sizeInBytes: 176340
                url:"https://"
            }
            * /
            //
        }
        */
        

    }
    useEffect(()=>{
        if(dmsetup){
            const savedFmtList = dmsetup.availableFmt
            const savedSelectedFmt = dmsetup.selectedFmt
            const savedTransList = dmsetup.availableTrans
            const savedSelectedTrans = dmsetup.selectedTrans

            if(savedSelectedFmt){
                setSelectedFmt(savedSelectedFmt)
            }
            if(savedSelectedTrans){
                setSelectedTrans(savedSelectedTrans)
            }

            setAvailableFmt(savedFmtList)
            setAvailableTrans(savedTransList)
        }
    },[dmsetup])
    const finishSetup = async() =>{
       if(confirm("Are you sure want to finish setup")){
        const row = {
            status: 2,
            selectedFmt,
            selectedTrans
        }
        await mDMSetup.updateByCourseId(course.id, row)
        if(reconfigureSetup){
            setReconfigureSetup(false)
        }
        setAlreadySetup(true)
        }
    }
    const cancelSetup = async() => {
        if(reconfigureSetup){
            setReconfigureSetup(false)
        }else{
            setRunSetup(false)
        }
        // setAlreadySetup(false)
    }
    const subRenderState = !availableFmt.length
    const fmtSelectorProps = {
        subRenderState,
        loadingFetchToc,
        getAvailableFmt,
        availableFmt,
        selectFmt,
        selectedFmt,
        setSelectedFmt,
        finishSetup
                    
    }
    const selectFmtMessage = selectedFmt == selectFmt ? 'Please select desired video format' : `Selected format ${selectedFmt}`
    const chgSelectFmtMessage = selectedFmt == selectFmt ? "Not Already setted up" : `You select ${selectedFmt}`
    const message = alreadySetup ? `Selected video format is ${selectedFmt}` : chgSelectFmtMessage
    
    let showQueueSetup = false
    let showGetAvailableFmt = false
    let showConfigSetup = false
    

    const fmtAlreadyAvailable = availableFmt.length > 0

    if(!fmtAlreadyAvailable){
        if(reconfigureSetup){
            showGetAvailableFmt = true
        }else if(runSetup){
            showGetAvailableFmt = true
        }
    }
    if(alreadySetup){
        if(reconfigureSetup){
            showQueueSetup = true
        }
    }else{
        if(runSetup){
            showQueueSetup = true
        }
    }

    if(!showGetAvailableFmt){
        showConfigSetup = true
    }
    return (<>
    {/* <div>Show Queue Setup : {showQueueSetup ? "Y":"N" }</div>
    <div>Show Get Availble Fmt : {showGetAvailableFmt ? "Y":"N" }</div>
    <div>Show Config Setup : {showConfigSetup ? "Y":"N" }</div> */}
    {
        showQueueSetup ? <div className="queue-setup my-2 border p-2 rounded">
        {
            showGetAvailableFmt ? <div className="flex p-2 px-2">
                <Button onMouseOut={e=>clearStatusBar()} 
                  onMouseOver={e=>logStatusBar('QueueSetup',`Click to retrieve available video format or size`)}
                loading={loadingFetchToc} icon="fa fa-cog" onClick={e=> getAvailableFmt(e)} caption="Get Available Media Format & Transcripts"/>
            </div> : ''
        }
        {
            showConfigSetup ? <>
            <div className="flex items-center p-2 px-2">
                <div className="w-[150px]">
                    <label className="font-bold">Select Format</label>
                </div>
                <div>
                    <DropdownSelect onMouseOut={e=>clearStatusBar()} 
                    onMouseOver={e=>logStatusBar('QueueSetup',`Select video size or format`)}
                    data={availableFmt} selected={selectedFmt} onSelect={fmt=>setSelectedFmt(fmt)}
                    captionSuffix="p"/>
                </div>
            </div>
            <div className="flex items-center p-2 px-2">
                <div className="w-[150px]">
                    <label className="font-bold">Select Transcript Lang</label>
                </div>
                <div>

                <DropdownSelect onMouseOut={e=>clearStatusBar()} 
                  onMouseOver={e=>logStatusBar('QueueSetup',`Select transcript lang`)}
                 data={availableTrans} selected={selectedTrans} onSelect={trans=>setSelectedTrans(trans)}/>
                </div>
            </div>

            <div className="flex p-2 gap-2">
                <Button onMouseOut={e=>clearStatusBar()} 
                  onMouseOver={e=>logStatusBar('QueueSetup',`Cancel this setup and back to main queue`)}
                caption="Cancel" icon="fa fa-times" onClick={e=>cancelSetup(e)}/>
                <Button onMouseOut={e=>clearStatusBar()} 
                  onMouseOver={e=>logStatusBar('QueueSetup',`Finish this setup and back to main queue`)}
                disabled={selectedFmt==selectFmt || selectedTrans==selectTrans} icon="fa fa-save" onClick={e=> finishSetup(e)} caption="Finish Setup"/>
            </div>
            <div className="flex p-2">
                {message}
            </div>
            </>:''
        }    
        </div>:''
    }
    </>)
}

export default QueueSetup
    